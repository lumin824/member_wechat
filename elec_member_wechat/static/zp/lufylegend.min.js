var LF = {};
(function (A, aw) {
    var aA = "pc",
        L = "iPhone",
        p = "iPod",
        N = "iPad",
        z = "Android",
        W = "Windows Phone",
        P = "BlackBerry",
        S = "none",
        Y = "undefined",
        G = "landscape",
        d = "portrait",
        I = "__LF__pixel__ratio__",
        af, ac;

    function y(aE) {
            this.eventType = aE;
            this._ll_preventDefault = false
        }
    y.prototype.preventDefault = function () {
            this._ll_preventDefault = true
        };
    y.INIT = "init";
    y.COMPLETE = "complete";
    y.ENTER_FRAME = "enter_frame";
    y.WINDOW_RESIZE = "resize";
    y.WINDOW_ORIENTATIONCHANGE = "orientationchange";
    y.SOUND_COMPLETE = "sound_complete";
    y.END_CONTACT = "endContact";
    y.PRE_SOLVE = "preSolve";
    y.POST_SOLVE = "postSolve";
    y.BEGIN_CONTACT = "beginContact";
    y.addEventListener = function (aH, aF, aG, aE) {
            if (aE == null) {
                aE = false
            }
            if (aH.addEventListener) {
                aH.addEventListener(aF, aG, aE)
            } else {
                if (aH.attachEvent) {
                    aH["e" + aF + aG] = aG;
                    aH[aF + aG] = function () {
                        aH["e" + aF + aG]()
                    };
                    aH.attachEvent("on" + aF, aH[aF + aG])
                }
            }
        };
    y.removeEventListener = function (aH, aF, aG, aE) {
            if (aE == null) {
                aE = false
            }
            if (aH.removeEventListener) {
                aH.removeEventListener(aF, aG, aE)
            } else {
                if (aH.detachEvent) {
                    aH["e" + aF + aG] = aG;
                    aH[aF + aG] = function () {
                        aH["e" + aF + aG]()
                    };
                    aH.detachEvent("on" + aF, aH[aF + aG])
                }
            }
        };
    var g = function () {
            throw "LMouseEvent cannot be instantiated"
        };
    g.MOUSE_DOWN = "mousedown";
    g.MOUSE_UP = "mouseup";
    g.TOUCH_START = "touchstart";
    g.TOUCH_MOVE = "touchmove";
    g.TOUCH_END = "touchend";
    g.MOUSE_MOVE = "mousemove";
    g.MOUSE_OVER = "mouseover";
    g.MOUSE_OUT = "mouseout";
    g.DOUBLE_CLICK = "dblclick";
    var au = function () {
            throw "LMultitouchInputMode cannot be instantiated"
        };
    au.NONE = "none";
    au.GESTURE = "gesture";
    au.TOUCH_POINT = "touchPoint";
    var H = function () {
            throw "LMultitouch cannot be instantiated"
        };
    H.inputMode = "none";
    H.touchs = [];
    var ab = function () {
            throw "LTimerEvent cannot be instantiated"
        };
    ab.TIMER = "timer";
    ab.TIMER_COMPLETE = "timerComplete";
    var at = function () {
            throw "LTextEvent cannot be instantiated"
        };
    at.TEXT_INPUT = "textInput";
    at.WIND_COMPLETE = "windComplete";
    var aq = function () {
            throw "LFocusEvent cannot be instantiated"
        };
    aq.FOCUS_IN = "focusIn";
    aq.FOCUS_OUT = "focusOut";
    var an = (function () {
            function aE() {
                var aF = this;
                aF.container = {};
                aF.dispatchAllEvent = false;
                aF.mouseDownContainer = [];
                aF.mouseUpContainer = [];
                aF.mouseMoveContainer = [];
                aF.mouseOverContainer = [];
                aF.mouseOutContainer = [];
                aF.mouseDblContainer = [];
                aF.textFieldInputContainer = [];
                aF.buttonContainer = []
            }
            aE.prototype = {
                pushInputBox: function (aI) {
                    var aH = this,
                        aJ = aH.textFieldInputContainer,
                        aG, aF;
                    for (aG = 0, aF = aJ.length; aG < aF; aG++) {
                            if (aI.objectIndex == aJ[aG].objectIndex) {
                                return
                            }
                        }
                    aH.textFieldInputContainer.push(aI)
                },
                removeInputBox: function (aI) {
                    var aH = this,
                        aJ = aH.textFieldInputContainer,
                        aG, aF;
                    for (aG = 0, aF = aJ.length; aG < aF; aG++) {
                            if (aI.objectIndex == aJ[aG].objectIndex) {
                                aH.textFieldInputContainer.splice(aG, 1);
                                break
                            }
                        }
                },
                pushButton: function (aI) {
                    var aH = this,
                        aJ = aH.buttonContainer,
                        aG, aF;
                    for (aG = 0, aF = aJ.length; aG < aF; aG++) {
                            if (aI.objectIndex == aJ[aG].objectIndex) {
                                return
                            }
                        }
                    aH.buttonContainer.push(aI)
                },
                removeButton: function (aI) {
                    var aH = this,
                        aJ = aH.buttonContainer,
                        aG, aF;
                    for (aG = 0, aF = aJ.length; aG < aF; aG++) {
                            if (aI.objectIndex == aJ[aG].objectIndex) {
                                aH.buttonContainer.splice(aG, 1);
                                break
                            }
                        }
                },
                dispatchEventButton: function (aI) {
                    var aH = this,
                        aJ = aH.buttonContainer,
                        aG, aF;
                    for (aG = 0, aF = aJ.length; aG < aF; aG++) {
                            if (typeof aH.buttonContainer[aG].ll_button_mode == "") {
                                aH.buttonContainer[aG].ll_button_mode(aI)
                            }
                        }
                },
                addEvent: function (aI, aH, aG) {
                    var aF = this;
                    aH.push({
                        container: aI,
                        listener: aG
                    })
                },
                removeEvent: function (aK, aJ, aI) {
                    var aH = this,
                        aG, aF;
                    for (aG = 0, aF = aJ.length; aG < aF; aG++) {
                            if (aJ[aG].container.objectIndex === aK.objectIndex && (!aI || aJ[aG].listener == aI)) {
                                aJ.splice(aG, 1);
                                break
                            }
                        }
                },
                addMouseDownEvent: function (aH, aG) {
                    var aF = this;
                    aF.addEvent(aH, aF.mouseDownContainer, aG)
                },
                addMouseUpEvent: function (aH, aG) {
                    var aF = this;
                    aF.addEvent(aH, aF.mouseUpContainer, aG)
                },
                addMouseMoveEvent: function (aH, aG) {
                    var aF = this;
                    aF.addEvent(aH, aF.mouseMoveContainer, aG)
                },
                addMouseOverEvent: function (aH, aG) {
                    var aF = this;
                    aF.addEvent(aH, aF.mouseOverContainer, aG)
                },
                addMouseOutEvent: function (aH, aG) {
                    var aF = this;
                    aF.addEvent(aH, aF.mouseOutContainer, aG)
                },
                addMouseDblEvent: function (aH, aG) {
                    var aF = this;
                    aF.addEvent(aH, aF.mouseDblContainer, aG)
                },
                addMouseEvent: function (aI, aF, aH) {
                    var aG = this;
                    if (aF == g.MOUSE_DOWN) {
                        aG.addMouseDownEvent(aI, aH)
                    } else {
                        if (aF == g.MOUSE_UP) {
                            aG.addMouseUpEvent(aI, aH)
                        } else {
                            if (aF == g.MOUSE_OVER) {
                                aG.addMouseOverEvent(aI, aH)
                            } else {
                                if (aF == g.MOUSE_OUT) {
                                    aG.addMouseOutEvent(aI, aH)
                                } else {
                                    if (aF == g.MOUSE_MOVE) {
                                        aG.addMouseMoveEvent(aI, aH)
                                    } else {
                                        aG.addMouseDblEvent(aI, aH)
                                    }
                                }
                            }
                        }
                    }
                },
                hasEventListener: function (aL, aH, aK) {
                    var aI = this,
                        aJ;
                    if (aH == g.MOUSE_DOWN) {
                            aJ = aI.mouseDownContainer
                        } else {
                            if (aH == g.MOUSE_UP) {
                                aJ = aI.mouseUpContainer
                            } else {
                                if (aH == g.MOUSE_OVER) {
                                    aJ = aI.mouseOverContainer
                                } else {
                                    if (aH == g.MOUSE_OUT) {
                                        aJ = aI.mouseOutContainer
                                    } else {
                                        if (aH == g.MOUSE_MOVE) {
                                            aJ = aI.mouseMoveContainer
                                        } else {
                                            aJ = aI.mouseDblContainer
                                        }
                                    }
                                }
                            }
                        }
                    for (var aG = 0, aF = aJ.length; aG < aF; aG++) {
                            if (aJ[aG].container.objectIndex === aL.objectIndex && (!aK || aJ[aG].listener == aK)) {
                                return true
                            }
                        }
                    return false
                },
                removeMouseDownEvent: function (aH, aG) {
                    var aF = this;
                    aF.removeEvent(aH, aF.mouseDownContainer, aG)
                },
                removeMouseUpEvent: function (aH, aG) {
                    var aF = this;
                    aF.removeEvent(aH, aF.mouseUpContainer, aG)
                },
                removeMouseMoveEvent: function (aH, aG) {
                    var aF = this;
                    aF.removeEvent(aH, aF.mouseMoveContainer, aG)
                },
                removeMouseOverEvent: function (aH, aG) {
                    var aF = this;
                    aF.removeEvent(aH, aF.mouseOverContainer, aG)
                },
                removeMouseOutEvent: function (aH, aG) {
                    var aF = this;
                    aF.removeEvent(aH, aF.mouseOutContainer, aG)
                },
                removeMouseDblEvent: function (aH, aG) {
                    var aF = this;
                    aF.removeEvent(aH, aF.mouseDblContainer, aG)
                },
                removeMouseEvent: function (aI, aF, aH) {
                    var aG = this;
                    if (aF == g.MOUSE_DOWN) {
                        aG.removeMouseDownEvent(aI, aH)
                    } else {
                        if (aF == g.MOUSE_UP) {
                            aG.removeMouseUpEvent(aI, aH)
                        } else {
                            if (aF == g.MOUSE_OVER) {
                                aG.removeMouseOverEvent(aI, aH)
                            } else {
                                if (aF == g.MOUSE_OUT) {
                                    aG.removeMouseOutEvent(aI, aH)
                                } else {
                                    if (aF == g.MOUSE_MOVE) {
                                        aG.removeMouseMoveEvent(aI, aH)
                                    } else {
                                        aG.removeMouseDblEvent(aI, aH)
                                    }
                                }
                            }
                        }
                    }
                },
                dispatchMouseEvent: function (aH, aG) {
                    var aF = this;
                    if (aG == g.MOUSE_DOWN) {
                        aF.dispatchEvent(aH, aF.mouseDownContainer, g.MOUSE_DOWN);
                        aF.dispatchEvent(aH, aF.textFieldInputContainer)
                    } else {
                        if (aG == g.MOUSE_UP) {
                            aF.dispatchEvent(aH, aF.mouseUpContainer, g.MOUSE_UP)
                        } else {
                            if (aG == g.DOUBLE_CLICK) {
                                aF.dispatchEvent(aH, aF.mouseDblContainer, g.DOUBLE_CLICK)
                            } else {
                                aF.dispatchEventButton(aH);
                                aF.dispatchEvent(aH, aF.mouseOutContainer, g.MOUSE_OUT);
                                aF.dispatchEvent(aH, aF.mouseOverContainer, g.MOUSE_OVER);
                                aF.dispatchEvent(aH, aF.mouseMoveContainer, g.MOUSE_MOVE)
                            }
                        }
                    }
                },
                getRootParams: function (aF) {
                    var aH = aF.parent,
                        aG = {
                            x: 0,
                            y: 0,
                            scaleX: 1,
                            scaleY: 1
                        };
                    while (aH && aH != "root") {
                            aG.x *= aH.scaleX;
                            aG.y *= aH.scaleY;
                            aG.x += aH.x;
                            aG.y += aH.y;
                            aG.scaleX *= aH.scaleX;
                            aG.scaleY *= aH.scaleY;
                            aH = aH.parent
                        }
                    return aG
                },
                _mouseEnabled: function (aG) {
                    var aF = this;
                    if (!aG || !aG.parent) {
                        return false
                    }
                    if (!aG.visible || (typeof aG.mouseEnabled != Y && !aG.mouseEnabled)) {
                        return false
                    }
                    var aH = aG.parent;
                    while (aH && aH != "root") {
                        if (!aH.mouseEnabled || !aH.mouseChildren || !aH.visible) {
                            return false
                        }
                        aH = aH.parent;
                        if (!aH) {
                            return false
                        }
                    }
                    return true
                },
                _dispatchEvent: function (aF, aL, aN, aK, aM, aJ) {
                    var aO = this,
                        aI, aH, aG = aN.length;
                    for (aI = aM; aI <= aJ && aI < aG; aI++) {
                            o = aN[aI];
                            if (o.sp.objectIndex != aK) {
                                continue
                            }
                            aF.currentTarget = aF.clickTarget = o.sp;
                            if (!aF.target) {
                                aF.target = o.sp
                            }
                            aF.event_type = aL;
                            aF.selfX = (aF.offsetX - o.co.x - o.sp.x) / (o.co.scaleX * o.sp.scaleX);
                            aF.selfY = (aF.offsetY - o.co.y - o.sp.y) / (o.co.scaleY * o.sp.scaleY);
                            o.listener(aF, o.sp)
                        }
                },
                dispatchEvent: function (aF, aL, aM) {
                    var aP = this,
                        aH, aN, aO = [],
                        aI, aK, aJ;
                    for (aK = 0, aJ = aL.length; aK < aJ; aK++) {
                            aH = aL[aK].container || aL[aK];
                            if (!aP._mouseEnabled(aH)) {
                                continue
                            }
                            aN = aP.getRootParams(aH);
                            if (!aM && aH.mouseEvent) {
                                aH.mouseEvent(aF, g.MOUSE_DOWN, aN);
                                continue
                            }
                            if (aH.ismouseon(aF, aN)) {
                                if (aM == g.MOUSE_OUT) {
                                    continue
                                }
                                if (aM == g.MOUSE_OVER) {
                                    if (aH.ll_mousein) {
                                        continue
                                    }
                                }
                                if (aM != g.MOUSE_UP) {
                                    aH.ll_mousein = true
                                }
                                aO.push({
                                    sp: aH,
                                    co: aN,
                                    listener: aL[aK].listener
                                })
                            } else {
                                if (aM != g.MOUSE_OUT && aM != g.MOUSE_OVER) {
                                    continue
                                }
                                if (!aH.ll_mousein) {
                                    continue
                                }
                                aH.ll_mousein = false;
                                aO.push({
                                    sp: aH,
                                    co: aN,
                                    listener: aL[aK].listener
                                })
                            }
                        }
                    if (aO.length == 0) {
                            return
                        }
                    if (aO.length > 1) {
                            aO = aO.sort(aP._sort.bind(aP))
                        }
                    aJ = aO.length;
                    for (aK = 0; aK < aJ; aK++) {
                            aI = aO[aK];
                            aP._dispatchEvent(aF, aM, aO, aI.sp.objectIndex, aK, aP.dispatchAllEvent ? aJ - 1 : aK);
                            if (aK < aO.length - 1 && aI.sp.objectIndex == aO[aK + 1].sp.objectIndex) {
                                aO.splice(aK, 1);
                                aK--;
                                continue
                            }
                            var aG;
                            while (true) {
                                if (!aG) {
                                    aG = aI.sp.parent;
                                    aF.target = aI.sp
                                }
                                if (!aG || aG == "root") {
                                    break
                                }
                                aP._dispatchEvent(aF, aM, aO, aG.objectIndex, aK + 1, aJ);
                                aF.target = aG;
                                aG = aG.parent;
                                if (!aG || aG == "root") {
                                    break
                                }
                            }
                            if (!aP.dispatchAllEvent) {
                                break
                            } else {
                                continue
                            }
                        }
                },
                set: function (aG, aF) {
                    this.container[aG] = aF
                },
                _sort: function (aN, aM) {
                    var aO = this,
                        aI, aG, aL = aO._getSort(aN.sp),
                        aF = aO._getSort(aM.sp),
                        aK, aJ, aH;
                    for (aK = 0, aJ = aL.length, aH = aF.length; aK < aJ && aK < aH; aK++) {
                            aI = aL[aK];
                            aG = aF[aK];
                            if (aI.objectIndex == aG.objectIndex) {
                                continue
                            }
                            return aG.parent.getChildIndex(aG) - aI.parent.getChildIndex(aI)
                        }
                    return aF.length - aL.length
                },
                _getSort: function (aF) {
                    var aH = aF.parent,
                        aG = [aF];
                    while (aH && aH != "root") {
                            aG.unshift(aH);
                            aH = aH.parent
                        }
                    return aG
                }
            };
            return new aE()
        })();
    var C = function () {
            throw "LKeyboardEvent cannot be instantiated"
        };
    C.KEY_DOWN = "keydown";
    C.KEY_UP = "keyup";
    C.KEY_PRESS = "keypress";
    var e = function () {
            throw "LAccelerometerEvent cannot be instantiated"
        };
    e.DEVICEMOTION = "devicemotion";

    function az() {
            throw "LStageAlign cannot be instantiated"
        }
    az.TOP = "T";
    az.BOTTOM = "B";
    az.LEFT = "L";
    az.RIGHT = "Re";
    az.TOP_LEFT = "TL";
    az.TOP_RIGHT = "TR";
    az.TOP_MIDDLE = "TM";
    az.BOTTOM_LEFT = "BL";
    az.BOTTOM_RIGHT = "BR";
    az.BOTTOM_MIDDLE = "BM";
    az.MIDDLE = "M";

    function al() {
            throw "LStageScaleMode cannot be instantiated"
        }
    al.EXACT_FIT = "exactFit";
    al.SHOW_ALL = "showAll";
    al.NO_BORDER = "noBorder";
    al.NO_SCALE = "noScale";
    var ae = (function () {
            function aE() {
                throw "LGlobal cannot be instantiated"
            }
            aE.FULL_SCREEN = "full_screen";
            aE.traceDebug = false;
            aE.displayState = S;
            aE.aspectRatio = S;
            aE.canvasObj = null;
            aE.canvas = null;
            aE.webAudio = true;
            aE.objectIndex = 1;
            aE.stage = null;
            aE.width = 0;
            aE.height = 0;
            aE.box2d = null;
            aE.speed = 50;
            aE.IS_MOUSE_DOWN = false;
            aE.stopPropagation = false;
            aE.preventDefault = true;
            aE.childList = new Array();
            aE.dragList = new Array();
            aE.excludingContainer = new Array();
            aE.fpsStatus = null;
            aE.stageScale = "noScale";
            aE.align = "M";
            aE.mobile = false;
            aE.canTouch = false;
            aE.os = aA;
            aE.ios = false;
            aE.android = false;
            aE.android_new = false;
            aE.backgroundColor = null;
            aE.destroy = true;
            aE.forceRefresh = false;
            aE.ratio = aw.devicePixelRatio || 1;
            aE.startTimer = 0;
            aE.keepClear = true;
            aE.top = 0;
            aE.left = 0;
            aE.window = aw;
            aE.pauseLoop = false;
            aE._setPauseLoopTrue = false;
            aE.setPauseLoop = function (aG, aF) {
                if (aG && aF) {
                    aE._setPauseLoopTrue = true
                } else {
                    aE.pauseLoop = aG;
                    aE._setPauseLoopTrue = false
                }
            };
            (function (aG) {
                aE.isOldFirefox = (function (aI) {
                    var aJ = aI.toLowerCase().indexOf("firefox");
                    if (aJ < 0) {
                        return false
                    }
                    var aH = aI.substring(aJ + 8, aI.length);
                    return parseFloat(aH) < 39
                })(aG);
                if (aG.indexOf(L) > 0) {
                    aE.os = L;
                    aE.canTouch = true;
                    aE.ios = true
                } else {
                    if (aG.indexOf(p) > 0) {
                        aE.os = p;
                        aE.canTouch = true;
                        aE.ios = true
                    } else {
                        if (aG.indexOf(N) > 0) {
                            aE.os = N;
                            aE.ios = true;
                            aE.canTouch = true
                        } else {
                            if (aG.indexOf(z) > 0) {
                                aE.os = z;
                                aE.canTouch = true;
                                aE.android = true;
                                var aF = aG.indexOf(z);
                                if (parseInt(aG.substr(aF + 8, 1)) > 3) {
                                    aE.android_new = true
                                }
                            } else {
                                if (aG.indexOf(W) > 0) {
                                    aE.os = W;
                                    aE.canTouch = true
                                } else {
                                    if (aG.indexOf(P) > 0) {
                                        aE.os = P;
                                        aE.canTouch = true
                                    }
                                }
                            }
                        }
                    }
                }
                aE.mobile = aE.canTouch
            })(navigator.userAgent);
            aE.requestAnimFrame = function () {
                return aw.requestAnimationFrame || aw.webkitRequestAnimationFrame || aw.mozRequestAnimationFrame || aw.oRequestAnimationFrame || aw.msRequestAnimationFrame ||
                function (aF) {
                    aw.setTimeout(aF, 1000 / 60, (new Date).getTime())
                }
            }();
            aE.setDebug = function (aF) {
                aE.traceDebug = aF
            };
            aE.setCanvas = function (aH, aF, aG) {
                aE.ll_createCanvas(aH, aF, aG);
                aE.ll_createStage();
                if (aE.displayState == ay.FULL_SCREEN) {
                    aE.resize()
                } else {
                    if (typeof aE.displayState == "number") {
                        aE.resize(aE.width * aE.displayState, aE.height * aE.displayState)
                    }
                }
                if (aE.notMouseEvent) {
                    return
                }
                if (aE.canTouch) {
                    aE.ll_clicks = 0;
                    aE.ll_prev_clickTime = 0;
                    y.addEventListener(aE.canvasObj, g.TOUCH_START, aE.ll_touchStart);
                    y.addEventListener(aE.canvasObj, g.TOUCH_END, aE.ll_touchEnd);
                    y.addEventListener(aE.canvasObj, g.TOUCH_MOVE, aE.ll_touchMove)
                }
            };
            aE.ll_createCanvas = function (aJ, aF, aG) {
                aE.id = aJ;
                aE.object = document.getElementById(aJ);
                aF = aF || $(aE.object).innerWidth();
                aG = aG || $(aE.object).innerHeight();
                aE.object.innerHTML = '<div style="position:absolute;margin:0;padding:0;overflow:visible;-webkit-transform: translateZ(0);z-index:0;"><canvas id="' + aE.id + '_canvas" style="margin:0;padding:0;width:' + aF + "px;height:" + aG + 'px;"><div id="noCanvas"><p>Hey there, it looks like you\'re using Microsoft\'s Internet Explorer. Microsoft hates the Web and doesn\'t support HTML5 :(</p></div></canvas></div><div id="' + aE.id + '_InputText" style="position:absolute;margin:0;padding:0;z-index:10;display:none;"><textarea rows="1" id="' + aE.id + '_InputTextareaBox" style="resize:none;background:transparent;border:0px;"></textarea><input type="text" id="' + aE.id + '_InputTextBox"  style="background:transparent;border:0px;" /><input type="password" id="' + aE.id + '_passwordBox"  style="background:transparent;border:0px;" /></div>';
                aE.canvasObj = document.getElementById(aE.id + "_canvas");
                aE._canvas = document.createElement("canvas");
                aE._context = aE._canvas.getContext("2d");
                if (aE._context) {
                    aE.canvasObj.innerHTML = ""
                }
                var aI = 1;
                try {
                    aI = aE._context.backingStorePixelRatio || aE._context.webkitBackingStorePixelRatio || aE._context.mozBackingStorePixelRatio || aE._context.msBackingStorePixelRatio || aE._context.oBackingStorePixelRatio || 1
                } catch (aH) {}
                aE.ratio = (aw.devicePixelRatio || 1) / aI;
                aE.inputBox = document.getElementById(aE.id + "_InputText");
                aE.inputTextareaBoxObj = document.getElementById(aE.id + "_InputTextareaBox");
                aE.inputTextBoxObj = document.getElementById(aE.id + "_InputTextBox");
                aE.passwordBoxObj = document.getElementById(aE.id + "_passwordBox");
                aE.inputTextField = null;
                if (aF) {
                    aE.canvasObj.width = aF
                }
                if (aG) {
                    aE.canvasObj.height = aG
                }
                aE.width = aE.canvasObj.width;
                aE.height = aE.canvasObj.height;
                aE.canvasStyleWidth = aE.width;
                aE.canvasStyleHeight = aE.height;
                aE.canvas = aE.canvasObj.getContext("2d");
                aE.canvasObj.style.height = aE.canvasObj.height + "px";
                aE.canvasObj.style.width = aE.canvasObj.width + "px";
                aE.canvasObj.width *= aE.ratio;
                aE.canvasObj.height *= aE.ratio;
                aE.offsetX = af = 0;
                aE.offsetY = ac = 0
            };
            aE.ll_createStage = function () {
                aE.stage = new X();
                aE.stage.parent = "root";
                aE.childList.push(aE.stage);
                aE.stage.baseAddEvent = aE.stage.addEventListener;
                aE.stage.baseRemoveEvent = aE.stage.removeEventListener;
                aE.stage.addEventListener = function (aF, aG) {
                    if (aF == y.WINDOW_RESIZE || aF == y.WINDOW_ORIENTATIONCHANGE) {
                        if (aF == y.WINDOW_RESIZE) {
                            aE.stage.onresizeListener = aG
                        } else {
                            aE.stage.onorientationchangeListener = aG
                        }
                        if (!aE.stage.onresize) {
                            aE.stage.onresize = function (aH) {
                                aE.stage.onresizeEvent = aH
                            };
                            y.addEventListener(aE.window, aF, aE.stage.onresize)
                        }
                    } else {
                        if (aF == C.KEY_DOWN || aF == C.KEY_UP || aF == C.KEY_PRESS) {
                            y.addEventListener(aE.window, aF, aG)
                        } else {
                            aE.stage.baseAddEvent(aF, aG)
                        }
                    }
                };
                aE.stage.removeEventListener = function (aF, aG) {
                    if (aF == y.WINDOW_RESIZE || aF == y.WINDOW_ORIENTATIONCHANGE) {
                        if (aF == y.WINDOW_RESIZE) {
                            delete aE.stage.onresizeListener;
                            if (aE.stage.onorientationchangeListener) {
                                return
                            }
                        } else {
                            delete aE.stage.onorientationchangeListener;
                            if (aE.stage.onresizeListener) {
                                return
                            }
                        }
                        y.removeEventListener(aE.window, y.WINDOW_RESIZE, aE.stage.onresize);
                        delete aE.stage.onresize
                    } else {
                        if (aF == C.KEY_DOWN || aF == C.KEY_UP || aF == C.KEY_PRESS) {
                            y.removeEventListener(aE.window, aF, aG)
                        } else {
                            aE.stage.baseRemoveEvent(aF, aG)
                        }
                    }
                };
                aE.innerWidth = aw.innerWidth;
                aE.innerHeight = aw.innerHeight;
                y.addEventListener(aE.window, "blur", function () {
                    aE.stage.dispatchEvent(new y(aq.FOCUS_OUT))
                })
            };
            aE.ll_touchStart = function (aF) {
                aE._outStageCheckCount = 1;
                aE.IS_MOUSE_DOWN = true;
                aE.stage.dispatchEvent(new y(aq.FOCUS_IN));
                if (aE.inputBox.style.display != S) {
                    aE.inputTextField._ll_getValue()
                }
                var aM, aK, aN, aJ, aL;
                aM = parseInt(0 + aE.object.style.left) + parseInt(aE.canvasObj.style.marginLeft);
                aK = parseInt(0 + aE.object.style.top) + parseInt(aE.canvasObj.style.marginTop);
                if (H.inputMode == au.NONE) {
                    aN = aE.ll_touchStartEvent(aF, 0, aM, aK)
                } else {
                    if (H.inputMode == au.TOUCH_POINT) {
                        for (var aL = 0, aI = aF.touches.length; aL < aI; aL++) {
                            if (!H.touchs["touch" + aF.touches[aL].identifier]) {
                                aN = aE.ll_touchStartEvent(aF, aL, aM, aK)
                            }
                        }
                    }
                }
                var aH = new Date();
                var aG = aH.getTime();
                aE.ll_clicks = (aG <= (aE.ll_prev_clickTime + 500)) ? (aE.ll_clicks + 1) : 1;
                aE.ll_prev_clickTime = aG;
                if (aE.ll_clicks === 2) {
                    aE.mouseEvent(aN, g.DOUBLE_CLICK);
                    aE.ll_clicks = 0
                }
                if (aE.mouseJoint_start) {
                    aE.mouseJoint_start(aN)
                }
                aE.touchHandler(aF)
            };
            aE.ll_touchStartEvent = function (aI, aJ, aG, aF) {
                var aH = {
                    offsetX: (aI.touches[aJ].pageX - aG),
                    offsetY: (aI.touches[aJ].pageY - aF),
                    touchPointID: aI.touches[aJ].identifier
                };
                aH.offsetX = aE.ll_scaleX(aH.offsetX);
                aH.offsetY = aE.ll_scaleY(aH.offsetY);
                af = aE.offsetX = aH.offsetX;
                ac = aE.offsetY = aH.offsetY;
                H.touchs["touch" + aH.touchPointID] = aH;
                aE.mouseEvent(aH, g.MOUSE_DOWN);
                aE.buttonStatusEvent = aH;
                return aH
            };
            aE.ll_touchEnd = function (aK) {
                var aL, aJ, aG, aH, aF, aI;
                aE.IS_MOUSE_DOWN = false;
                if (H.inputMode == au.TOUCH_POINT) {
                    for (aG in H.touchs) {
                        aL = H.touchs[aG];
                        aI = false;
                        for (aH = 0, aF = aK.touches.length; aH < aF; aH++) {
                            if (aK.touches[aH].identifier == aL.touchPointID) {
                                aI = true;
                                break
                            }
                        }
                        if (!aI) {
                            aJ = aL;
                            delete H.touchs[aG];
                            aE.mouseEvent(aJ, g.MOUSE_UP)
                        }
                    }
                }
                if (!aJ) {
                    aJ = {
                        offsetX: aE.offsetX,
                        offsetY: aE.offsetY
                    }
                }
                aE.mouseEvent(aJ, g.MOUSE_UP);
                aE.touchHandler(aK);
                aE.buttonStatusEvent = null;
                if (aE.mouseJoint_end) {
                    aE.mouseJoint_end()
                }
                aE.stage.dispatchEvent(new y(aq.FOCUS_OUT))
            };
            aE.ll_touchMove = function (aI) {
                var aK, aJ, aG, aF, aH = aI.touches.length;
                aK = parseInt(0 + aE.object.style.left) + parseInt(aE.canvasObj.style.marginLeft);
                aJ = parseInt(0 + aE.object.style.top) + parseInt(aE.canvasObj.style.marginTop);
                if (H.inputMode == au.NONE) {
                    aH = 1
                }
                for (i = 0, aF = aI.touches.length; i < aF && i < aH; i++) {
                    aG = {
                        offsetX: (aI.touches[i].pageX - aK),
                        offsetY: (aI.touches[i].pageY - aJ),
                        touchPointID: aI.touches[i].identifier
                    };
                    aG.offsetX = aE.ll_scaleX(aG.offsetX);
                    aG.offsetY = aE.ll_scaleY(aG.offsetY);
                    af = aE.offsetX = aG.offsetX;
                    ac = aE.offsetY = aG.offsetY;
                    if (H.touchs["touch" + aG.touchPointID] && H.touchs["touch" + aG.touchPointID].offsetX == aG.offsetX && H.touchs["touch" + aG.touchPointID].offsetY == aG.offsetY) {
                        continue
                    }
                    aE.buttonStatusEvent = aG;
                    H.touchs["touch" + aG.touchPointID] = aG;
                    if (aG.offsetX <= 0 || aG.offsetX >= aE.innerWidth || aG.offsetX >= aE.width || aG.offsetY <= 0 || aG.offsetY >= aE.innerHeight || aG.offsetY >= aE.height) {
                        aE._outStageCheckCount = 0
                    } else {
                        aE._outStageCheckCount = 1
                    }
                    aE.mouseEvent(aG, g.MOUSE_MOVE)
                }
                aE.touchHandler(aI);
                if (aE.mouseJoint_move) {
                    aE.mouseJoint_move(aG)
                }
            };
            aE.ll_mouseOut = function (aG) {
                if (aG.offsetX == null && aG.layerX != null) {
                    aG.offsetX = aG.layerX;
                    aG.offsetY = aG.layerY
                }
                var aF = {};
                aF.offsetX = aE.ll_scaleX(aG.offsetX);
                aF.offsetY = aE.ll_scaleY(aG.offsetY);
                aE.mouseEvent(aF, g.MOUSE_OUT);
                aE.IS_MOUSE_DOWN = false
            };
            aE.touchHandler = function (aF) {
                if (aE.stopPropagation) {
                    aF.stopPropagation();
                    if (aF.stopImmediatePropagation) {
                        aF.stopImmediatePropagation()
                    }
                }
                if (aE.preventDefault) {
                    aF.preventDefault()
                }
                return aF
            };
            aE.mouseEvent = function (aH, aG) {
                if (aG == g.MOUSE_MOVE) {
                    aE.dragHandler(aH)
                }
                if (an.container[aG]) {
                    an.dispatchMouseEvent(aH, aG);
                    return
                }
                for (var aF = aE.childList.length - 1; aF >= 0; aF--) {
                    if (aE.childList[aF].mouseEvent && aE.childList[aF].mouseEvent(aH, aG)) {
                        break
                    }
                }
            };
            aE.dragHandler = function (aH) {
                var aF, aG, aJ, aI = aE.dragList;
                for (aF = aI.length - 1; aF >= 0; aF--) {
                    aG = aI[aF];
                    if (aE.canTouch && aG.ll_touchPointID != aH.touchPointID) {
                        continue
                    }
                    aJ = aG.parent.globalToLocal(new ax(aH.offsetX - aG.ll_dragMX + aG.ll_dragGlobalPoint.x, aH.offsetY - aG.ll_dragMY + aG.ll_dragGlobalPoint.y));
                    aG.x = aJ.x;
                    aG.y = aJ.y;
                    if (aG.dragRange) {
                        if (aG.x < aG.dragRange.left) {
                            aG.x = aG.dragRange.left
                        } else {
                            if (aG.x > aG.dragRange.right) {
                                aG.x = aG.dragRange.right
                            }
                        }
                        if (aG.y < aG.dragRange.top) {
                            aG.y = aG.dragRange.top
                        } else {
                            if (aG.y > aG.dragRange.bottom) {
                                aG.y = aG.dragRange.bottom
                            }
                        }
                    }
                    break
                }
            };
            aE.onShow = function () {
                if (aE.pauseLoop) {
                    return
                }
                if (aE._setPauseLoopTrue) {
                    aE.pauseLoop = true;
                    aE._setPauseLoopTrue = false
                }
                hg.time && hg.time.updateInFrame(aE.delta);
                if (aE.canvas == null) {
                    return
                }
                if (aE._outStageCheckCount <= 0) {
                    aE._outStageCheckCount--;
                    if (aE._outStageCheckCount < -2) {
                        aE.stage.dispatchEvent(new y(aq.FOCUS_OUT));
                        aE._outStageCheckCount = 1
                    }
                }
                if (aE.fpsStatus) {
                    aE.fpsStatus.reset()
                }
                if (aE.stage.onresizeEvent) {
                    if (aE.stage.onresizeListener) {
                        aE.stage.onresizeListener(aE.stage.onresizeEvent)
                    }
                    if (aE.stage.onorientationchangeListener) {
                        aE.stage.onorientationchangeListener({
                            orientation: (aw.innerWidth > aw.innerHeight ? G : d)
                        })
                    }
                    delete aE.stage.onresizeEvent
                }
                if (aE.forceRefresh) {
                    aE.canvasObj.width = aE.canvasObj.width;
                    aE.forceRefresh = false
                }
                aE.canvas.beginPath();
                if (aE.box2d != null) {
                    aE.box2d.ll_show();
                    if (!aE.traceDebug && aE.keepClear) {
                        aE.canvas.clearRect(0, 0, aE.width + 1, aE.height + 1)
                    }
                } else {
                    if (aE.keepClear) {
                        aE.canvas.clearRect(0, 0, aE.width + 1, aE.height + 1)
                    }
                    if (aE.backgroundColor !== null) {
                        aE.canvas.fillStyle = aE.backgroundColor;
                        aE.canvas.fillRect(0, 0, aE.width, aE.height)
                    }
                }
                aE.show(aE.childList);
                A.showTopBar()
            };
            aE.show = function (aH) {
                !aH && (aH = aE.childList);
                for (var aG = 0, aF = aH.length, aI; aG < aF; aG++) {
                    aI = aH[aG];
                    if (aI && aI.ll_show) {
                        aI.ll_show();
                        if (aI._ll_removeFromSelf) {
                            aG--;
                            aF--
                        }
                    }
                }
            };
            aE.divideCoordinate = function (aN, aL, aO, aH) {
                var aK, aI, aJ = aN / aH,
                    aG = aL / aO,
                    aF = [],
                    aM;
                for (aK = 0; aK < aO; aK++) {
                        aM = [];
                        for (aI = 0; aI < aH; aI++) {
                            aM.push({
                                x: aJ * aI,
                                y: aG * aK,
                                width: aJ,
                                height: aG
                            })
                        }
                        aF.push(aM)
                    }
                return aF
            };
            aE.divideList = function (aM, aL, aN, aH) {
                var aK, aI, aJ = aM / aH,
                    aG = aL / aN,
                    aF = [];
                for (aK = 0; aK < aN; aK++) {
                        for (aI = 0; aI < aH; aI++) {
                            aF.push({
                                x: aJ * aI,
                                y: aG * aK,
                                width: aJ,
                                height: aG
                            })
                        }
                    }
                return aF
            };
            aE._create_loading_color = function () {
                var aF = aE.canvas.createRadialGradient(aE.width / 2, aE.height, 0, aE.width / 2, 0, aE.height);
                aF.addColorStop(0, "red");
                aF.addColorStop(0.3, "orange");
                aF.addColorStop(0.4, "yellow");
                aF.addColorStop(0.5, "green");
                aF.addColorStop(0.8, "blue");
                aF.addColorStop(1, "violet");
                return aF
            };
            aE.hitPolygon = function (aK, aN, aM) {
                var aL = 0,
                    aP = aK[0],
                    aI = (aN <= aP[0]),
                    aH = (aM <= aP[1]),
                    aJ, aG, aO, aF, aQ;
                for (aJ = 1, aG = aK.length; aJ < aG + 1; aJ++) {
                        aO = aK[aJ % aG];
                        aF = (aN <= aO[0]);
                        aQ = (aM <= aO[1]);
                        if (aH != aQ) {
                            if (aI == aF) {
                                if (aI) {
                                    aL += (aH ? -1 : 1)
                                }
                            } else {
                                if (aN <= (aP[0] + (aO[0] - aP[0]) * (aM - aP[1]) / (aO[1] - aP[1]))) {
                                    aL += (aH ? -1 : 1)
                                }
                            }
                        }
                        aP = aO;
                        aI = aF;
                        aH = aQ
                    }
                return 0 != aL
            };
            aE.hitTestPolygon = function (aP, aO) {
                var aK, aJ, aI, aF, aN, aM, aL = [
                    [aP, [],
                        []
                    ],
                    [aO, [],
                        []
                    ]
                ];
                for (aJ = 0; aJ < aL.length; aJ++) {
                    aF = aL[aJ][0],
                    aN = aL[aJ][1];
                    for (aK = 0, aI = aF.length; aK < aI; aK++) {
                        aL[aJ][2].push(new F(aF[aK][0], aF[aK][1]));
                        if (aK < aI - 1) {
                            aN.push((new F(aF[aK + 1][0] - aF[aK][0], aF[aK + 1][1] - aF[aK][1])).normL())
                        }
                    }
                    aN.push((new F(aF[0][0] - aF[aI - 1][0], aF[0][1] - aF[aI - 1][1])).normL())
                }
                for (aJ = 0; aJ < aL.length; aJ++) {
                    aN = aL[aJ][1];
                    for (aK = 0, aI = aN.length; aK < aI; aK++) {
                        var aH = F.getMinMax(aL[0][2], aN[aK]);
                        var aG = F.getMinMax(aL[1][2], aN[aK]);
                        if (aH.max_o < aG.min_o || aH.min_o > aG.max_o) {
                            return false
                        }
                    }
                }
                return true
            };
            aE.hitTestPolygonArc = function (aQ, aF) {
                if (aE.hitPolygon(aQ, aF[0], aF[1])) {
                    return true
                }
                var aK, aJ, aI, aP, aO, aN, aM, aG, aL, aH;
                for (aK = 0, aI = aQ.length; aK < aI; aK++) {
                    aJ = aK < aI - 1 ? aK + 1 : 0;
                    aP = aQ[aK],
                    aO = aQ[aJ];
                    aN = new F(aF[0] - aP[0], aF[1] - aP[1]),
                    aM = new F(aO[0] - aP[0], aO[1] - aP[1]);
                    aH = aM.normalize();
                    aL = F.dot(aN, aH);
                    if (aL <= 0) {
                        if (aN.x * aN.x + aN.y * aN.y < aF[3]) {
                            return true
                        }
                    } else {
                        if (aL * aL < aM.x * aM.x + aM.y * aM.y) {
                            aG = F.cross(aN, aH);
                            if (aG * aG < aF[3]) {
                                return true
                            }
                        }
                    }
                }
                return false
            };
            aE.hitTestArc = function (aQ, aO, aP, aH) {
                var aN = aQ.getWidth() * 0.5,
                    aL = aO.getWidth() * 0.5,
                    aJ = aQ._startX ? aQ._startX() : aQ.startX(),
                    aI = aO._startX ? aO._startX() : aO.startX(),
                    aG = aQ._startY ? aQ._startY() : aQ.startY(),
                    aF = aO._startY ? aO._startY() : aO.startY();
                if (typeof aP != Y) {
                        aJ += (aN - aP);
                        aG += (aN - aP);
                        aN = aP
                    }
                if (typeof aH != Y) {
                        aI += (aL - aH);
                        aF += (aL - aH);
                        aL = aH
                    }
                var aM = aJ + aN - aI - aL,
                    aK = aG + aN - aF - aL;
                return aM * aM + aK * aK < (aN + aL) * (aN + aL)
            };
            aE.hitTestRect = function (aL, aJ, aS, aQ) {
                var aO = aL.getWidth(),
                    aN = aJ.getWidth(),
                    aU = aL.getHeight(),
                    aT = aJ.getHeight(),
                    aI = aL._startX ? aL._startX() : aL.startX(),
                    aH = aJ._startX ? aJ._startX() : aJ.startX(),
                    aG = aL._startY ? aL._startY() : aL.startY(),
                    aF = aJ._startY ? aJ._startY() : aJ.startY();
                if (typeof aS != Y) {
                        aI += (aO - aS[0]) * 0.5;
                        aG += (aU - aS[1]) * 0.5;
                        aO = aS[0];
                        aU = aS[1]
                    }
                if (typeof aQ != Y) {
                        aH += (aN - aQ[0]) * 0.5;
                        aF += (aT - aQ[1]) * 0.5;
                        aN = aQ[0];
                        aT = aQ[1]
                    }
                var aR = aI > aH ? aI : aH,
                    aP = aG > aF ? aG : aF,
                    aM = (aI + aO) > (aH + aN) ? (aH + aN) : (aI + aO),
                    aK = (aG + aU) > (aF + aT) ? (aF + aT) : (aG + aU);
                return aR <= aM && aP <= aK
            };
            aE.hitTest = aE.hitTestRect;
            aE.setFrameRate = function (aF) {
                if (aE.frameRate) {
                    clearInterval(aE.frameRate)
                }
                aE.speed = aF;
                aE.frameRate = setInterval(function () {
                    aE.onShow()
                }, aF)
            };
            aE.ll_scaleX = function (aF) {
                return (aF - aE.left) * aE.width / aE.canvasStyleWidth
            };
            aE.ll_scaleY = function (aF) {
                return (aF - aE.top) * aE.height / aE.canvasStyleHeight
            };
            aE.ll_setStageSize = function (aF, aG) {
                aF = Math.ceil(aF);
                aG = Math.ceil(aG);
                aE.canvasObj.style.width = aF + "px";
                aE.canvasObj.style.height = aG + "px";
                aE.canvasStyleWidth = aF;
                aE.canvasStyleHeight = aG
            };
            aE.resize = function (aI, aL) {
                var aH, aK, aJ = 0,
                    aG = 0,
                    aM = aw.innerWidth,
                    aF = aw.innerHeight;
                aE.innerWidth = aM;
                aE.innerHeight = aF;
                if (aI) {
                        aH = aI
                    }
                if (aL) {
                        aK = aL
                    }
                if (aE.stageScale == "noScale") {
                        aH = aI || aE.width;
                        aK = aL || aE.height
                    }
                switch (aE.stageScale) {
                    case "exactFit":
                        aH = aI || aM;
                        aK = aL || aF;
                        break;
                    case "noBorder":
                        aH = aI || aM;
                        aK = aL || aE.height * aM / aE.width;
                        switch (aE.align) {
                        case az.BOTTOM:
                        case az.BOTTOM_LEFT:
                        case az.BOTTOM_RIGHT:
                        case az.BOTTOM_MIDDLE:
                            aJ = aF - aK;
                            break
                        }
                        break;
                    case "showAll":
                        if (aM / aF > aE.width / aE.height) {
                            aK = aL || aF;
                            aH = aI || aE.width * aF / aE.height
                        } else {
                            aH = aI || aM;
                            aK = aL || aE.height * aM / aE.width
                        }
                    case "noScale":
                    default:
                        switch (aE.align) {
                        case az.BOTTOM:
                        case az.BOTTOM_LEFT:
                            aJ = aF - aK;
                            break;
                        case az.RIGHT:
                        case az.TOP_RIGHT:
                            aG = aM - aH;
                            break;
                        case az.TOP_MIDDLE:
                            aG = (aM - aH) * 0.5;
                            break;
                        case az.BOTTOM_RIGHT:
                            aJ = aF - aK;
                            aG = aM - aH;
                            break;
                        case az.BOTTOM_MIDDLE:
                            aJ = aF - aK;
                            aG = (aM - aH) * 0.5;
                            break;
                        case az.MIDDLE:
                            aJ = (aF - aK) * 0.5;
                            aG = (aM - aH) * 0.5;
                            break;
                        case az.TOP:
                        case az.LEFT:
                        case az.TOP_LEFT:
                        default:
                        }
                    }
                aE.canvasObj.style.marginTop = aJ + "px";
                aE.canvasObj.style.marginLeft = aG + "px";
                if (aE.isOldFirefox) {
                        aE.left = parseInt(aE.canvasObj.style.marginLeft);
                        aE.top = parseInt(aE.canvasObj.style.marginTop)
                    }
                aE.ll_setStageSize(aH, aK)
            };
            aE.sleep = function (aF) {
                var aG = new Date();
                while ((new Date().getTime() - aG.getTime()) < aF) {}
            };
            aE.screen = function (aF) {
                aE.displayState = aF;
                if (aE.stage) {
                    if (typeof aE.displayState == "number") {
                        aE.resize(aE.width * aE.displayState, aE.height * aE.displayState)
                    } else {
                        aE.resize()
                    }
                }
            };
            return aE
        })();
    var aD = ae;
    var ay = ae;
    if (!Array.prototype.indexOf) {
            Array.prototype.indexOf = function (aF) {
                var aE = this.length >>> 0;
                var aG = Number(arguments[1]) || 0;
                aG = (aG < 0) ? Math.ceil(aG) : Math.floor(aG);
                if (aG < 0) {
                    aG += aE
                }
                for (; aG < aE; aG++) {
                    if (aG in this && this[aG] === aF) {
                        return aG
                    }
                }
                return -1
            }
        }
    if (!Array.isArray) {
            Array.isArray = function (aE) {
                return Object.prototype.toString.apply(aE) == "[object Array]"
            }
        }
    if (!Function.prototype.bind) {
            Function.prototype.bind = function (aE) {
                if (typeof this !== "function") {
                    throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable")
                }
                var aI = Array.prototype.slice.call(arguments, 1),
                    aH = this,
                    aF = function () {},
                    aG = function () {
                        return aH.apply(this instanceof aF && aE ? this : aE, aI.concat(Array.prototype.slice.call(arguments)))
                    };
                aF.prototype = this.prototype;
                aG.prototype = new aF();
                return aG
            }
        }
    if (!Array.prototype.forEach) {
            Array.prototype.forEach = function (aK, aF) {
                var aH, aG;
                if (this == null) {
                    throw new TypeError(" this is null or not defined")
                }
                var aJ = Object(this);
                var aE = aJ.length >>> 0;
                if (typeof aK !== "function") {
                    throw new TypeError(aK + " is not a function")
                }
                if (arguments.length > 1) {
                    aH = aF
                }
                aG = 0;
                while (aG < aE) {
                    var aI;
                    if (aG in aJ) {
                        aI = aJ[aG];
                        aK.call(aH, aI, aG, aJ)
                    }
                    aG++
                }
            }
        }
    if (!Array.prototype.every) {
            Array.prototype.every = function (aG, aH) {
                var aJ, aI;
                if (this == null) {
                    throw new TypeError("this is null or not defined")
                }
                var aL = Object(this);
                var aF = aL.length >>> 0;
                if (typeof aG !== "function") {
                    throw new TypeError()
                }
                if (arguments.length > 1) {
                    aJ = aH
                }
                aI = 0;
                while (aI < aF) {
                    var aK;
                    if (aI in aL) {
                        aK = aL[aI];
                        var aE = aG.call(aJ, aK, aI, aL);
                        if (!aE) {
                            return false
                        }
                    }
                    aI++
                }
                return true
            }
        }
    if (!Array.prototype.some) {
            Array.prototype.some = function (aG) {
                if (this == null) {
                    throw new TypeError("Array.prototype.some called on null or undefined")
                }
                if (typeof aG !== "function") {
                    throw new TypeError()
                }
                var aI = Object(this);
                var aE = aI.length >>> 0;
                var aF = arguments.length >= 2 ? arguments[1] : void 0;
                for (var aH = 0; aH < aE; aH++) {
                    if (aH in aI && aG.call(aF, aI[aH], aH, aI)) {
                        return true
                    }
                }
                return false
            }
        }
    if (!String.format) {
            String.format = function (aF) {
                var aE = Array.prototype.slice.call(arguments, 1);
                return aF.replace(/{(\d+)}/g, function (aG, aH) {
                    return typeof aE[aH] != "undefined" ? aE[aH] : aG
                })
            }
        }
    if (Function.prototype.name === undefined && Object.defineProperty !== undefined) {
            Object.defineProperty(Function.prototype, "name", {
                get: function () {
                    var aF = /function\s([^(]{1,})\(/;
                    var aE = (aF).exec((this).toString());
                    return (aE && aE.length > 1) ? aE[1].trim() : ""
                },
                set: function (aE) {}
            })
        }
    function K() {
            if (!ae.traceDebug) {
                return
            }
            var aG = document.getElementById("traceObject"),
                aF;
            if (K.arguments.length > 0 && aG == null) {
                    var aI = document.createElement("DIV");
                    aI.position = 0;
                    aI.style.position = "absolute";
                    document.body.appendChild(aI);
                    aG = document.createElement("TEXTAREA");
                    aG.id = "traceObject";
                    aG.style.width = (aw.innerWidth * 0.5) + "px";
                    aG.style.height = "200px";
                    var aE = document.createElement("BUTTON");
                    aE.style.width = (aw.innerWidth * 0.25) + "px";
                    aE.innerHTML = "Hide";
                    aI.appendChild(aE);
                    y.addEventListener(aE, ae.mobile ? "touchstart" : "click", function (aJ) {
                        aG.style.display = (aG.style.display == "none" ? "" : "none")
                    });
                    aE = document.createElement("BUTTON");
                    aE.style.width = (aw.innerWidth * 0.25) + "px";
                    aE.innerHTML = "position";
                    aI.appendChild(aE);
                    var aH = function (aJ) {
                        aI.position++;
                        if (aI.position == 0) {
                            aI.style.top = "5px";
                            aI.style.left = "5px"
                        } else {
                            if (aI.position == 1) {
                                aI.style.top = (aw.innerHeight - 20 - parseInt(aG.style.height)) + "px";
                                aI.style.left = "5px"
                            } else {
                                if (aI.position == 2) {
                                    aI.style.top = "5px";
                                    aI.style.left = (aw.innerWidth - parseInt(aG.style.width)) + "px"
                                } else {
                                    aI.style.top = (aw.innerHeight - 20 - parseInt(aG.style.height)) + "px";
                                    aI.style.left = (aw.innerWidth - parseInt(aG.style.width)) + "px";
                                    aI.position = -1
                                }
                            }
                        }
                    };
                    aH();
                    y.addEventListener(aE, ae.mobile ? "touchstart" : "click", aH);
                    aI.appendChild(document.createElement("BR"));
                    aI.appendChild(aG)
                }
            for (aF = 0; aF < K.arguments.length; aF++) {
                    aG.value = aG.value + K.arguments[aF] + "\r\n";
                    aG.scrollTop = aG.scrollHeight
                }
        }
    if (!aw.console) {
            aw.console = {
                log: K,
                warn: K
            }
        }
    function am(aE) {
            ae.stage.addChild(aE)
        }
    function ao(aE) {
            ae.stage.removeChild(aE)
        }
    var M = Z;

    function B(aJ, aE, aF) {
            var aH = null,
                aI = aJ.constructor.prototype,
                aG = {};
            if (aJ.constructor.name == "Object") {
                    console.warn("When you use the extends. You must make a method like 'XX.prototype.xxx=function(){}'. but not 'XX.prototype={xxx:function(){}}'.")
                }
            if (typeof aJ.__ll__parent__ == Y) {
                    aJ.__ll__parent__ = [];
                    aJ.__ll__parent__ = []
                }
            aJ.__ll__parent__.push(aE.prototype);
            for (aH in aI) {
                    aG[aH] = 1
                }
            for (aH in aE.prototype) {
                    if (!aG[aH]) {
                        aI[aH] = aE.prototype[aH]
                    }
                }
            if (aI.toString == Object.prototype.toString) {
                    aI.toString = r.prototype.toString
                }
            aE.apply(aJ, aF)
        }
    var E = B;

    function ah() {
            return (new Date()).getTime() - ae.startTimer
        }
    function aa(aG) {
            var aE, aF = /([^#?]+\.)([^.#?]+)/;
            aE = aG.match(aF);
            if (aE.length >= 3) {
                return aE[2].toLowerCase()
            }
            return null
        }
    var r = (function () {
            function aE() {
                this.type = "LObject";
                this.objectIndex = ++ae.objectIndex;
                this.objectindex = this.objectIndex
            }
            aE.prototype = {
                callParent: function (aF, aH) {
                    if (!aF || !aH) {
                        return
                    }
                    var aI = this,
                        aK = false,
                        aJ, aG = "__ll__parent_call" + aF;
                    if (typeof aI[aG] == "undefined") {
                            aK = true;
                            aI[aG] = 0
                        } else {
                            aI[aG]++
                        }
                    if (aI[aG] >= aI.__ll__parent__.length) {
                            return false
                        }
                    if (!aI.__ll__parent__[aI[aG]][aF]) {
                            aJ = aI.callParent(aF, aH)
                        } else {
                            aJ = aI.__ll__parent__[aI[aG]][aF].apply(aI, aH)
                        }
                    if (aK) {
                            delete aI[aG]
                        }
                    return aJ
                },
                copyProperty: function (aF) {
                    var aH = this,
                        aG;
                    for (aG in aF) {
                            if (typeof aF[aG] == "number" || typeof aF[aG] == "string" || typeof aF[aG] == "boolean") {
                                if (aG == "objectindex" || aG == "objectIndex") {
                                    continue
                                }
                                aH[aG] = aF[aG]
                            } else {
                                if (Array.isArray(aF[aG])) {
                                    aH[aG] = aF[aG].slice()
                                }
                            }
                        }
                    if (aF.mask) {
                            aH.mask = aF.mask.clone()
                        }
                },
                toString: function () {
                    return "[object " + this.constructor.name + "]"
                }
            };
            return aE
        })();
    var V = (function () {
            function aE(aK, aF, aI, aH, aM, aJ, aG, aN) {
                var aL = this;
                E(aL, r, []);
                aL.redMultiplier = aK;
                aL.greenMultiplier = aF;
                aL.blueMultiplier = aI;
                aL.alphaMultiplier = aH;
                aL.redOffset = aM;
                aL.greenOffset = aJ;
                aL.blueOffset = aG;
                aL.alphaOffset = aN
            }
            return aE
        })();
    var c = (function () {
            function aE() {
                var aF = this;
                E(aF, r, []);
                aF.matrix = null
            }
            return aE
        })();
    var aB = (function () {
            function aF(aM, aL, aK, aJ, aI, aH, aP, aO, aN) {
                var aQ = this;
                E(aQ, r, []);
                aQ.a = 1;
                aQ.b = 0;
                aQ.u = 0;
                aQ.c = 0;
                aQ.d = 1;
                aQ.v = 0;
                aQ.tx = 0;
                aQ.ty = 0;
                aQ.w = 1;
                if (typeof aM != Y) {
                    aQ.a = aM
                }
                if (typeof aL != Y) {
                    aQ.b = aL
                }
                if (typeof aK != Y) {
                    aQ.c = aK
                }
                if (typeof aJ != Y) {
                    aQ.d = aJ
                }
                if (typeof aI != Y) {
                    aQ.tx = aI
                }
                if (typeof aH != Y) {
                    aQ.ty = aH
                }
                if (typeof aP != Y) {
                    aQ.u = aP
                }
                if (typeof aO != Y) {
                    aQ.v = aO
                }
                if (typeof aN != Y) {
                    aQ.w = aN
                }
            }
            var aG = {
                setTo: function (aM, aL, aK, aJ, aI, aH, aP, aO, aN) {
                    var aQ = this;
                    if (typeof aM != Y) {
                        aQ.a = aM
                    }
                    if (typeof aL != Y) {
                        aQ.b = aL
                    }
                    if (typeof aK != Y) {
                        aQ.c = aK
                    }
                    if (typeof aJ != Y) {
                        aQ.d = aJ
                    }
                    if (typeof aI != Y) {
                        aQ.tx = aI
                    }
                    if (typeof aH != Y) {
                        aQ.ty = aH
                    }
                    if (typeof aP != Y) {
                        aQ.u = aP
                    }
                    if (typeof aO != Y) {
                        aQ.v = aO
                    }
                    if (typeof aN != Y) {
                        aQ.w = aN
                    }
                    return aQ
                },
                isIdentity: function () {
                    var aH = this;
                    return (aH.a == 1 && aH.b == 0 && aH.c == 0 && aH.d == 1 && aH.tx == 0 && aH.ty == 0 && u == 0 && v == 0 && w == 1)
                },
                transform: function (aI) {
                    var aH = this;
                    aI.transform(aH.a, aH.b, aH.c, aH.d, aH.tx, aH.ty);
                    return aH
                },
                identity: function () {
                    this.setTo(1, 0, 0, 1, 0, 0, 0, 0, 1)
                },
                rotate: function (aL) {
                    var aJ = this,
                        aM = aL * Math.PI / 180,
                        aK = Math.cos(aM),
                        aH = Math.sin(aM),
                        aI = new aF(aK, aH, -aH, aK, 0, 0, 0, 0, 1);
                    aJ.add(aI);
                    return aJ
                },
                scale: function (aK, aJ) {
                    var aI = this,
                        aH = new aF(aK, 0, 0, aJ, 0, 0, 0, 0, 1);
                    aI.add(aH);
                    return aI
                },
                translate: function (aI, aH) {
                    var aK = this,
                        aJ = new aF(1, 0, 0, 1, aI, aH, 0, 0, 1);
                    aK.add(aJ);
                    return aK
                },
                skew: function (aK, aH) {
                    var aJ = this,
                        aI = new aF(1, aH, aK, 1, 0, 0, 0, 0, 1);
                    aJ.add(aI);
                    return aJ
                },
                add: function (aH) {
                    var aR = this,
                        aN, aM, aL, aK, aJ, aI, aQ, aP, aO;
                    aN = aR.a * aH.a + aR.b * aH.c + aR.u * aH.tx;
                    aM = aR.a * aH.b + aR.b * aH.d + aR.u * aH.ty;
                    aQ = aR.a * aH.u + aR.b * aH.v + aR.u * aH.w;
                    aL = aR.c * aH.a + aR.d * aH.c + aR.v * aH.tx;
                    aK = aR.c * aH.b + aR.d * aH.d + aR.v * aH.ty;
                    aP = aR.c * aH.u + aR.d * aH.v + aR.v * aH.w;
                    aJ = aR.tx * aH.a + aR.ty * aH.c + aR.w * aH.tx;
                    aI = aR.tx * aH.b + aR.ty * aH.d + aR.w * aH.ty;
                    aO = aR.tx * aH.u + aR.ty * aH.v + aR.w * aH.w;
                    aR.setTo(aN, aM, aL, aK, aJ, aI, aQ, aP, aO)
                },
                toArray: function (aH) {
                    var aU = this;
                    if (Array.isArray(aH) && aH.length == 3) {
                        var aJ = aH[0] * aU.a + aH[1] * aU.c + aH[2] * aU.tx,
                            aI = aH[0] * aU.b + aH[1] * aU.d + aH[2] * aU.ty,
                            aK = aH[0] * aU.u + aH[1] * aU.v + aH[2] * aU.w;
                        return [aJ, aI, aK]
                    } else {
                        var aQ = aU.a * aH.a + aU.b * aH.c + aU.u * aH.tx,
                            aP = aU.a * aH.b + aU.b * aH.d + aU.u * aH.ty,
                            aT = aU.a * aH.u + aU.b * aH.v + aU.u * aH.w,
                            aO = aU.c * aH.a + aU.d * aH.c + aU.v * aH.tx,
                            aN = aU.c * aH.b + aU.d * aH.d + aU.v * aH.ty,
                            aS = aU.c * aH.u + aU.d * aH.v + aU.v * aH.w,
                            aM = aU.tx * aH.a + aU.ty * aH.c + aU.w * aH.tx,
                            aL = aU.tx * aH.b + aU.ty * aH.d + aU.w * aH.ty,
                            aR = aU.tx * aH.u + aU.ty * aH.v + aU.w * aH.w;
                        return [aQ, aP, aO, aN, aM, aL, aT, aS, aR]
                    }
                },
                clone: function () {
                    var aH = this;
                    return new aF(aH.a, aH.b, aH.c, aH.d, aH.tx, aH.ty, aH.u, aH.v, aH.w)
                }
            };
            for (var aE in aG) {
                aF.prototype[aE] = aG[aE]
            }
            return aF
        })();
    var F = (function () {
            function aE(aF, aG) {
                this.x = aF || 0;
                this.y = aG || 0
            }
            aE.dot = function (aG, aF) {
                return aG.x * aF.x + aG.y * aF.y
            };
            aE.cross = function (aG, aF) {
                return aG.x * aF.y - aG.y * aF.x
            };
            aE.distance = function (aH, aG) {
                var aF = aH.x - aG.x;
                var aI = aH.y - aG.y;
                return Math.sqrt(aF * aF + aI * aI)
            };
            aE.getMinMax = function (aN, aH) {
                var aG = aE.dot(aN[0], aH);
                var aJ = aE.dot(aN[0], aH);
                var aK = 0;
                var aM = 0;
                for (var aL = 1; aL < aN.length; aL++) {
                    var aI = aE.dot(aN[aL], aH);
                    if (aG > aI) {
                        aG = aI;
                        aK = aL
                    }
                    if (aJ < aI) {
                        aJ = aI;
                        aM = aL
                    }
                }
                var aF = {
                    min_o: aG,
                    min_i: aK,
                    max_o: aJ,
                    max_i: aM
                };
                return aF
            };
            aE.prototype = {
                length: function () {
                    var aF = this;
                    return Math.sqrt(aF.x * aF.x + aF.y * aF.y)
                },
                normalize: function () {
                    var aG = this,
                        aF = aG.length();
                    return new aE(aG.x / aF, aG.y / aF)
                },
                normR: function () {
                    return new aE(-this.y, this.x)
                },
                normL: function () {
                    return new aE(this.y, -this.x)
                }
            };
            return aE
        })();
    var f = (function () {
            function aF() {
                var aH = this;
                E(aH, r, []);
                aH._eventList = new Array()
            }
            var aG = {
                addEventListener: function (aH, aI) {
                    this._eventList.push({
                        listener: aI,
                        type: aH
                    })
                },
                removeEventListener: function (aJ, aL) {
                    var aI = this,
                        aH, aK;
                    aK = aI._eventList.length;
                    for (aH = 0; aH < aK; aH++) {
                            if (!aI._eventList[aH]) {
                                continue
                            }
                            if (aJ == aI._eventList[aH].type && (!aL || aI._eventList[aH].listener == aL)) {
                                aI._eventList.splice(aH, 1);
                                return
                            }
                        }
                },
                removeAllEventListener: function () {
                    this._eventList = []
                },
                dispatchEvent: function (aL) {
                    var aJ = this,
                        aH, aK = aJ._eventList.length,
                        aI = (typeof aL == "string") ? aL : aL.eventType;
                    for (aH = 0; aH < aK; aH++) {
                            if (!aJ._eventList[aH]) {
                                continue
                            }
                            if (aI == aJ._eventList[aH].type) {
                                if (typeof aL == "string") {
                                    aJ.currentTarget = aJ.target = aJ;
                                    aJ.eventType = aJ.event_type = aI;
                                    aJ._eventList[aH].listener(aJ);
                                    delete aJ.currentTarget;
                                    delete aJ.target;
                                    delete aJ.eventType
                                } else {
                                    if (!aL.target) {
                                        aL.target = aJ
                                    }
                                    if (!aL.currentTarget) {
                                        aL.currentTarget = aL.target
                                    }
                                    aL._ll_preventDefault = false;
                                    aJ._eventList[aH].listener(aL);
                                    if (aL._ll_preventDefault) {
                                        return false
                                    }
                                }
                                return true
                            }
                        }
                    return false
                },
                hasEventListener: function (aJ, aL) {
                    var aI = this,
                        aH, aK = aI._eventList.length;
                    for (aH = 0; aH < aK; aH++) {
                            if (!aI._eventList[aH]) {
                                continue
                            }
                            if (aJ == aI._eventList[aH].type) {
                                if (typeof aL == Y || aL == aI._eventList[aH].listener) {
                                    return true
                                }
                            }
                        }
                    return false
                }
            };
            for (var aE in aG) {
                aF.prototype[aE] = aG[aE]
            }
            return aF
        })();
        (function () {
            if (g_config && g_config.test || _manage) {
                return
            }
            aw.addEventListener("devicemotion", function aE(aH) {
                var aG = aH.accelerationIncludingGravity;
                if (aG) {
                    aw.removeEventListener("devicemotion", aE);
                    $.ajaxPrefilter("*", function (aI, aL, aJ) {
                        if (aL.data && aL.data.awardInfoB && aL.data.info) {
                            try {
                                aI.url += "&_d=" + aF(aG.x) + "|" + aF(aG.y) + "|" + aF(aG.z)
                            } catch (aK) {}
                        }
                    })
                }
            }, false);

            function aF(aG) {
                aG = parseFloat(aG.toFixed(2));
                return (aG === aG ? aG : 0) + ""
            }
        }());
    var Q = (function () {
            function aG() {
                var aH = this;
                E(aH, f, []);
                aH.name = "instance" + aH.objectIndex;
                aH.x = 0;
                aH.y = 0;
                aH.width = 0;
                aH.height = 0;
                aH.scaleX = 1;
                aH.scaleY = 1;
                aH.alpha = 1;
                aH.visible = true;
                aH.rotate = 0;
                aH.mask = null;
                aH.blendMode = null;
                aH.filters = null;
                aH.transform = new c();
                aH.parent = null;
                aH.setScaleOrigin(0, 0)
            }
            var aF = {
                _createCanvas: function () {
                    var aH = this;
                    if (!aH._canvas) {
                        aH._canvas = document.createElement("canvas");
                        aH._context = aH._canvas.getContext("2d")
                    }
                },
                ll_show: function () {
                    var aH = this,
                        aI = ae.canvas;
                    if (!aH._canShow()) {
                            return
                        }
                    aH._ll_trans = false;
                    if (!ae.box2d && typeof aH._ll_loopframe == "function") {
                            aH._ll_loopframe()
                        }
                    aI.save();
                    aH._showReady(aI);
                    if (aH.blendMode) {
                            aI.globalCompositeOperation = aH.blendMode
                        }
                    if (aH.filters) {
                            aH._ll_setFilters()
                        }
                    aH._rotateReady();
                    if (aH.mask != null && aH.mask.ll_show) {
                            aH.mask.ll_show();
                            aI.clip()
                        }
                    aH._transformRotate();
                    aH._transformScale();
                    aH._coordinate(aI);
                    if (aH.transform.matrix) {
                            aH.transform.matrix.transform(aI)
                        }
                    if (aH.alpha < 1) {
                            aH._ll_trans = true;
                            aI.globalAlpha = aH.alpha
                        }
                    if (ae.fpsStatus) {
                            ae.fpsStatus.display++;
                            if (aH._ll_trans) {
                                ae.fpsStatus.transform++
                            }
                        }
                    if (aH._ll_cacheAsBitmap) {
                            aH._ll_cacheAsBitmap._ll_show()
                        } else {
                            aH._ll_show(aI)
                        }
                    aI.restore();
                    if (ae.box2d != null && typeof aH._ll_loopframe == "function") {
                            aH._ll_loopframe()
                        }
                },
                _canShow: function () {
                    return this.visible
                },
                _coordinate: function (aI) {
                    var aH = this;
                    if (aH.x != 0 || aH.y != 0) {
                        aH._ll_trans = true;
                        aI.transform(1, 0, 0, 1, aH.x, aH.y)
                    }
                },
                _rotateReady: function () {},
                _showReady: function (aH) {},
                _ll_show: function (aH) {},
                _ll_setFilters: function () {
                    var aJ = this,
                        aK = aJ.filters,
                        aI, aH;
                    if (!aK) {
                            return
                        }
                    for (aI = 0, aH = aK.length; aI < aH; aI++) {
                            aK[aI].ll_show(aJ)
                        }
                },
                startX: function () {
                    return 0
                },
                startY: function () {
                    return 0
                },
                getWidth: function () {
                    return 1
                },
                getHeight: function () {
                    return 1
                },
                _transformRotate: function () {
                    var aH = this,
                        aI;
                    if (aH.rotate == 0) {
                            return
                        }
                    aH._ll_trans = true;
                    aI = ae.canvas,
                    rotateFlag = Math.PI / 180,
                    rotateObj = new aB();
                    if ((typeof aH.rotatex) == Y) {
                            aH.rotatex = 0;
                            aH.rotatey = 0
                        }
                    if (aH.box2dBody) {
                            rotateFlag = 1
                        }
                    rotateObj.a = Math.cos(aH.rotate * rotateFlag);
                    rotateObj.b = Math.sin(aH.rotate * rotateFlag);
                    rotateObj.c = -rotateObj.b;
                    rotateObj.d = rotateObj.a;
                    rotateObj.tx = aH.x + aH.rotatex;
                    rotateObj.ty = aH.y + aH.rotatey;
                    rotateObj.transform(aI).setTo(1, 0, 0, 1, -rotateObj.tx, -rotateObj.ty).transform(aI)
                },
                setScaleOrigin: function () {
                    var aI = this,
                        aH = arguments;
                    if (!aI._scaleOrigin) {
                            aI._scaleOrigin = [0, 0]
                        }["width", "height"].forEach(function (aM, aL) {
                            var aJ = aH[aL],
                                aK = parseFloat(aJ);
                            if (!isNaN(aK)) {
                                    if (typeof aJ == "string" && aJ.indexOf("%") != -1) {
                                        aK = aI[aM] * aK / 100
                                    }
                                    aI._scaleOrigin[aL] = aK
                                }
                        })
                },
                _transformScale: function () {
                    var aH = this,
                        aJ = ae.canvas,
                        aI;
                    if (aH.scaleX == 1 && aH.scaleY == 1) {
                            return
                        }
                    aH._ll_trans = true;
                    aI = new aB();
                    if (aH.scaleX != 1) {
                            aI.tx = aH.x + aH._scaleOrigin[0]
                        }
                    if (aH.scaleY != 1) {
                            aI.ty = aH.y + aH._scaleOrigin[1]
                        }
                    aI.a = aH.scaleX;
                    aI.d = aH.scaleY;
                    aI.transform(aJ).setTo(1, 0, 0, 1, -aI.tx, -aI.ty).transform(aJ)
                },
                getAbsoluteScale: function () {
                    var aH = this,
                        aK, aJ, aI;
                    aK = aH.scaleX;
                    aJ = aH.scaleY;
                    aI = aH.parent;
                    while (aI && aI != "root") {
                            aK *= aI.scaleX;
                            aJ *= aI.scaleY;
                            aI = aI.parent
                        }
                    return {
                            scaleX: aK,
                            scaleY: aJ
                        }
                },
                getRootCoordinate: function () {
                    return this.localToGlobal(new ax(0, 0))
                },
                localToGlobal: function (aI) {
                    var aJ = this,
                        aH, aL, aK;
                    m = aJ.getRootMatrix();
                    aK = m.toArray([aI.x, aI.y, 1]);
                    return new ax(aK[0], aK[1])
                },
                globalToLocal: function (aI) {
                    var aJ = this,
                        aH, aL, aK;
                    m = aJ.getLocalMatrix();
                    aK = m.toArray([aI.x, aI.y, 1]);
                    return new ax(aK[0], aK[1])
                },
                getBounds: function (aM) {
                    if (typeof aM == Y) {
                        return new O(0, 0, 0, 0)
                    }
                    var aK = this,
                        aH = 0,
                        aO = 0,
                        aI = 0,
                        aJ = 0,
                        aL, aN;
                    if (aK.objectIndex != aM.objectIndex) {
                            aL = aK.getRootCoordinate();
                            aN = aM.getRootCoordinate();
                            aH = aL.x - aN.x;
                            aO = aL.y - aN.y
                        }
                    if (aM.getWidth) {
                            aI = aM.getWidth()
                        }
                    if (aM.getHeight) {
                            aJ = aM.getHeight()
                        }
                    return new O(aH, aO, aI, aJ)
                },
                cacheAsBitmap: function (aN, aO, aJ) {
                    var aP = this;
                    if (!aN) {
                        aP._ll_cacheAsBitmap = null;
                        return
                    }
                    var aM = aP.x - aP.startX(),
                        aK = aP.y - aP.startY();
                    var aI = aP.getDataCanvas(aM, aK, aP.getWidth(), aP.getHeight());
                    var aL = new s(aI, 0, 0, null, null, s.DATA_CANVAS);
                    var aH = new q(aL, 0, 0, aP.getWidth(), aP.getHeight());
                    aH.x = -aM;
                    aH.y = -aK;
                    aP._ll_cacheAsBitmap = aH
                },
                getDataCanvas: function (aP, aO, aQ, aJ) {
                    var aR = this,
                        aH, aI, aK, aM, aN, aL;
                    aR._createCanvas();
                    aI = ae.canvasObj;
                    aM = ae.canvas;
                    aH = aR._canvas;
                    aK = aR._context;
                    aR.width = aQ || aR.getWidth();
                    aR.height = aJ || aR.getHeight();
                    aH.width = aR.width;
                    aH.height = aR.height;
                    aK.clearRect(0, 0, aR.width, aR.height);
                    ae.canvasObj = aR._canvas;
                    ae.canvas = aR._context;
                    aN = aR.x;
                    aL = aR.y;
                    aR.x = aP || 0;
                    aR.y = aO || 0;
                    aR.ll_show();
                    aR.x = aN;
                    aR.y = aL;
                    aR._canvas = aH;
                    aR._context = aK;
                    ae.canvasObj = aI;
                    ae.canvas = aM;
                    return aR._canvas
                },
                getDataURL: function () {
                    var aH = this,
                        aI = aH.getDataCanvas();
                    return aI.toDataURL.apply(aI, arguments)
                },
                ismouseonShapes: function (aH, aO, aL) {
                    var aQ = this,
                        aM = aQ,
                        aJ, aI, aK, aN, aP;
                    if (typeof aH == Y) {
                            aH = aQ.shapes
                        }
                    aJ = aQ.getRootMatrix();
                    for (aK = aH.length - 1; aK >= 0; aK--) {
                            aI = aH[aK];
                            aP = aI.arg;
                            aN = aQ._changeShape(aI.type, aP, aJ);
                            if (aI.type == n.VERTICES) {
                                if (ae.hitPolygon(aN, aO, aL)) {
                                    return true
                                }
                            } else {
                                if (aI.type == n.RECT) {
                                    if (ae.hitPolygon(aN, aO, aL)) {
                                        return true
                                    }
                                } else {
                                    if (aI.type == n.ARC) {
                                        if ((aN[0] - aO) * (aN[0] - aO) + (aN[1] - aL) * (aN[1] - aL) < aN[3]) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                    return false
                },
                _changeShape: function (aL, aP, aI) {
                    var aO, aP = aP,
                        aH, aK, aJ, aN, aM;
                    if (aL == n.VERTICES) {
                            aO = [];
                            for (aK = 0, aJ = aP.length; aK < aJ; aK++) {
                                aO[aK] = aI.toArray([aP[aK][0], aP[aK][1], 1])
                            }
                        } else {
                            if (aL == n.RECT) {
                                aO = [
                                    [aP[0], aP[1]],
                                    [aP[0] + aP[2], aP[1]],
                                    [aP[0] + aP[2], aP[1] + aP[3]],
                                    [aP[0], aP[1] + aP[3]]
                                ];
                                for (aK = 0, aJ = aO.length; aK < aJ; aK++) {
                                    aO[aK] = aI.toArray([aO[aK][0], aO[aK][1], 1])
                                }
                            } else {
                                if (aL == n.ARC) {
                                    aN = aI.toArray([aP[0], aP[1], 1]);
                                    aM = aI.toArray([aP[0] + aP[2], aP[1], 1]);
                                    aH = (aN[0] - aM[0]) * (aN[0] - aM[0]) + (aN[1] - aM[1]) * (aN[1] - aM[1]);
                                    aO = [aN[0], aN[1], Math.sqrt(aH), aH]
                                }
                            }
                        }
                    return aO
                },
                getRootMatrix: function () {
                    var aI = this,
                        aH = new aB();
                    while (aI && aI != "root") {
                            if (aI.scaleX != 1 || aI.scaleY != 1) {
                                aH.scale(aI.scaleX, aI.scaleY)
                            }
                            if (aI.rotate != 0) {
                                aH.rotate(aI.rotate)
                            }
                            if (aI.x != 0 || aI.y != 0) {
                                aH.translate(aI.x, aI.y)
                            }
                            aI = aI.parent
                        }
                    return aH
                },
                getLocalMatrix: function () {
                    var aJ = this,
                        aH = new aB(),
                        aK = [];
                    while (aJ && aJ != "root") {
                            aK.push(aJ);
                            aJ = aJ.parent
                        }
                    for (var aI = aK.length - 1; aI >= 0; aI--) {
                            aJ = aK[aI];
                            if (aJ.x != 0 || aJ.y != 0) {
                                aH.translate(-aJ.x, -aJ.y)
                            }
                            if (aJ.rotate != 0) {
                                aH.rotate(-aJ.rotate)
                            }
                            if (aJ.scaleX != 1 || aJ.scaleY != 1) {
                                aH.scale(1 / aJ.scaleX, 1 / aJ.scaleY)
                            }
                        }
                    return aH
                },
                remove: function () {
                    var aH = this,
                        aI = aH.parent;
                    if (!aI || aI == "root") {
                            return
                        }
                    aI.removeChild(aH);
                    aH._ll_removeFromSelf = true
                }
            };
            for (var aE in aF) {
                aG.prototype[aE] = aF[aE]
            }
            return aG
        })();
    var h = (function () {
            function aE() {
                var aH = this;
                E(aH, Q, []);
                aH.type = "LInteractiveObject";
                aH.mouseEnabled = true;
                aH.mouseList = new Array()
            }
            var aG = {
                addEventListener: function (aI, aJ) {
                    var aH = this;
                    if (aI.indexOf("mouse") >= 0 || aI.indexOf("touch") >= 0 || aI == g.DOUBLE_CLICK) {
                        if (an.container[aI] || ((aI == g.MOUSE_OVER || aI == g.MOUSE_OUT) && an.container[g.MOUSE_MOVE])) {
                            an.addMouseEvent(aH, aI, aJ);
                            return
                        }
                        aH.mouseList.push({
                            listener: aJ,
                            type: aI
                        })
                    } else {
                        aH._eventList.push({
                            listener: aJ,
                            type: aI
                        })
                    }
                },
                removeEventListener: function (aJ, aL) {
                    var aI = this,
                        aH, aK;
                    if (aJ.indexOf("mouse") >= 0 || aJ.indexOf("touch") >= 0 || aJ == g.DOUBLE_CLICK) {
                            if (an.container[aJ] || ((aJ == g.MOUSE_OVER || aJ == g.MOUSE_OUT) && an.container[g.MOUSE_MOVE])) {
                                an.removeMouseEvent(aI, aJ, aL);
                                return
                            }
                            aK = aI.mouseList.length;
                            for (aH = 0; aH < aK; aH++) {
                                if (!aI.mouseList[aH]) {
                                    continue
                                }
                                if (aJ == aI.mouseList[aH].type && aI.mouseList[aH].listener == aL) {
                                    aI.mouseList.splice(aH, 1);
                                    return
                                }
                            }
                        } else {
                            return aI.callParent("removeEventListener", arguments)
                        }
                },
                removeAllEventListener: function () {
                    var aH = this;
                    aH.mouseList.length = 0;
                    aH._eventList.length = 0;
                    if (an.container[g.MOUSE_DOWN]) {
                        an.removeMouseEvent(aH, g.MOUSE_DOWN)
                    }
                    if (an.container[g.MOUSE_UP]) {
                        an.removeMouseEvent(aH, g.MOUSE_UP)
                    }
                    if (an.container[g.MOUSE_MOVE]) {
                        an.removeMouseEvent(aH, g.MOUSE_MOVE);
                        an.removeMouseEvent(aH, g.MOUSE_OVER);
                        an.removeMouseEvent(aH, g.MOUSE_OUT)
                    }
                },
                hasEventListener: function (aJ, aL) {
                    var aI = this,
                        aH, aK;
                    if (an.container[aJ]) {
                            return an.hasEventListener(aI, aJ, aL)
                        }
                    if (aJ.indexOf("mouse") >= 0 || aJ.indexOf("touch") >= 0 || aJ == g.DOUBLE_CLICK) {
                            aK = aI.mouseList.length;
                            for (aH = 0; aH < aK; aH++) {
                                if (!aI.mouseList[aH]) {
                                    continue
                                }
                                if (aJ == aI.mouseList[aH].type && (!aL || aI.mouseList[aH].listener == aL)) {
                                    return true
                                }
                            }
                        } else {
                            return aI.callParent("hasEventListener", arguments)
                        }
                    return false
                }
            };
            for (var aF in aG) {
                aE.prototype[aF] = aG[aF]
            }
            return aE
        })();
    var ag = (function () {
            function aG() {
                var aH = this;
                E(aH, h, []);
                aH.childList = new Array();
                aH.numChildren = 0;
                aH.mouseChildren = true
            }
            var aF = {
                addChild: function (aJ) {
                    var aI = this,
                        aH;
                    if (aJ.parent) {
                            aH = ae.destroy;
                            ae.destroy = false;
                            aJ.parent.removeChild(aJ);
                            ae.destroy = aH
                        }
                    aJ.parent = aI;
                    aI.childList.push(aJ);
                    aI.numChildren = aI.childList.length;
                    aI._ll_removeFromSelf = false;
                    return aJ
                },
                addChildAt: function (aK, aI) {
                    var aJ = this,
                        aH;
                    if (aI < 0 || aI > aJ.childList.length) {
                            return
                        }
                    if (typeof aK.remove == "function") {
                            aH = ae.destroy;
                            ae.destroy = false;
                            aK.remove();
                            ae.destroy = aH
                        }
                    aK.parent = aJ;
                    aJ.childList.splice(aI, 0, aK);
                    aJ.numChildren = aJ.childList.length;
                    aJ._ll_removeFromSelf = false;
                    return aK
                },
                removeChild: function (aK) {
                    var aJ = this,
                        aL = aJ.childList,
                        aI, aH;
                    for (aI = 0, aH = aL.length; aI < aH; aI++) {
                            if (aK.objectIndex == aL[aI].objectIndex) {
                                if (ae.destroy && aK.die) {
                                    aK.die()
                                }
                                aJ.childList.splice(aI, 1);
                                break
                            }
                        }
                    aJ.numChildren = aJ.childList.length;
                    delete aK.parent
                },
                getChildAt: function (aH) {
                    var aI = this,
                        aJ = aI.childList;
                    if (aJ.length == 0 || aJ.length <= aH) {
                            return null
                        }
                    return aJ[aH]
                },
                getChildByName: function (aL) {
                    var aJ = this,
                        aK = aJ.childList,
                        aI, aH;
                    for (aI = 0, aH = aK.length; aI < aH; aI++) {
                            if (!aK[aI]) {
                                continue
                            }
                            if (aK[aI].name == aL) {
                                return aK[aI]
                            }
                        }
                    return null
                },
                removeChildAt: function (aH) {
                    var aI = this,
                        aK = aI.childList;
                    if (aK.length <= aH) {
                            return
                        }
                    if (ae.destroy && aK[aH].die) {
                            aK[aH].die()
                        }
                    var aJ = aI.childList.splice(aH, 1);
                    aI.numChildren = aI.childList.length;
                    return aJ
                },
                getChildIndex: function (aL) {
                    if (!aL) {
                        return -1
                    }
                    var aJ = this,
                        aK = aJ.childList,
                        aI, aH = aK.length;
                    for (aI = 0; aI < aH; aI++) {
                            if (aK[aI].objectIndex == aL.objectIndex) {
                                return aI
                            }
                        }
                    return -1
                },
                setChildIndex: function (aM, aI) {
                    var aK = this,
                        aL = aK.childList,
                        aJ, aH = aL.length;
                    if (aM.parent == "root" || aM.parent.objectIndex != aK.objectIndex || aI < 0 || aI >= aH) {
                            return -1
                        }
                    for (aJ = 0; aJ < aH; aJ++) {
                            if (aL[aJ].objectIndex == aM.objectIndex) {
                                break
                            }
                        }
                    aK.childList.splice(aJ, 1);
                    aK.childList.splice(aI, 0, aM);
                    return aI
                },
                resize: function () {
                    var aH = this;
                    aH.width = aH.getWidth();
                    aH.height = aH.getHeight()
                },
                removeAllChild: function () {
                    var aJ = this,
                        aK = aJ.childList,
                        aI, aH;
                    for (aI = 0, aH = aK.length; aI < aH; aI++) {
                            if (ae.destroy && aK[aI].die) {
                                aK[aI].die()
                            }
                        }
                    aJ.childList.length = 0;
                    aJ.width = 0;
                    aJ.height = 0;
                    aJ.numChildren = 0
                }
            };
            for (var aE in aF) {
                aG.prototype[aE] = aF[aE]
            }
            return aG
        })();
    var T = (function () {
            function aF() {
                var aI = this;
                E(aI, f, []);
                aI.currentTime = 0;
                aI.currentStart = 0;
                aI.currentSave = 0;
                aI.length = 0;
                aI.loopStart = 0;
                aI.loopEnd = 0;
                aI.loopIndex = 0;
                aI.loopLength = 1;
                aI.playing = false;
                aI.volume = 1;
                aI.soundType = "LWebAudio";
                aI.soundCache = [];
                a.Container.add(aI)
            }
            aF.container = [];
            aF.containerCount = 0;
            try {
                aF.audioTag = new Audio()
            } catch (aH) {
                HdGame.tlog("ReferenceError: Can't find variable: Audio");
                aF.audioTag = {
                    canPlayType: function () {
                        return false
                    }
                }
            }
            aF._context = null;
            var aG = {
                getWebAudio: function () {
                    var aI;
                    if (aF.containerCount > 0) {
                        aI = aF.container.shift()
                    } else {
                        if (typeof AudioContext !== Y) {
                            try {
                                aI = new AudioContext()
                            } catch (aJ) {
                                aF.containerCount = aF.container.length;
                                aI = aF.container.shift()
                            }
                        } else {
                            if (typeof webkitAudioContext !== Y) {
                                try {
                                    aI = new webkitAudioContext()
                                } catch (aJ) {
                                    aF.containerCount = aF.container.length;
                                    aI = aF.container.shift()
                                }
                            } else {
                                throw "AudioContext not supported. :("
                            }
                        }
                    }
                    if (!aI.createGainNode) {
                        aI.createGainNode = aI.createGain
                    }
                    aF.container.push(aI);
                    return aI
                },
                onload: function (aJ) {
                    var aI = this;
                    if (Object.prototype.toString.apply(aJ) !== "[object AudioBuffer]") {
                        aI.load(aJ);
                        return
                    }
                    if (!aI.data) {
                        aI.data = aI.getWebAudio()
                    }
                    aI.buffer = aJ;
                    aI.length = aI.buffer.duration;
                    var aK = new y(y.COMPLETE);
                    aK.currentTarget = aI;
                    aK.target = aI.buffer;
                    aI.dispatchEvent(aK)
                },
                _onended: function () {
                    var aI = this;
                    aI.dispatchEvent(y.SOUND_COMPLETE);
                    aI.close();
                    if (++aI.loopIndex < aI.loopLength) {
                        aI.play(aI.currentStart, undefined, aI.currentTimeTo)
                    }
                },
                load: function (aP) {
                    var aQ = this;
                    if (typeof aP !== "string") {
                        if (Object.prototype.toString.apply(aP) == "[object AudioBuffer]") {
                            aQ.onload(aP)
                        } else {
                            if (Object.prototype.toString.apply(aP) == "[object ArrayBuffer]") {
                                if (!aQ.data) {
                                    aQ.data = aQ.getWebAudio()
                                }
                                aQ.data.decodeAudioData(aP, aQ.onload.bind(aQ), function (aR) {
                                    throw "AudioContext decodeAudioData error : " + aR.toString()
                                })
                            }
                        }
                        return
                    }
                    var aO, aN, aM, aJ, aL, aI = {
                        mov: ["quicktime"],
                        "3gp": ["3gpp"],
                        midi: ["midi"],
                        mid: ["midi"],
                        ogv: ["ogg"],
                        m4a: ["acc"],
                        mp3: ["mpeg"],
                        wav: ["wav", "x-wav", "wave"],
                        wave: ["wav", "x-wav", "wave"],
                        aac: ["mp4", "aac"]
                    };
                    aO = aP.split(",");
                    for (aJ = 0; aJ < aO.length; aJ++) {
                        aN = aO[aJ].split(".");
                        aL = aN[aN.length - 1];
                        if (aI[aL]) {
                            aL = aI[aL]
                        } else {
                            aL = [aL]
                        }
                        aM = aL.some(function (aS, aR, aT) {
                            return aF.audioTag.canPlayType(aQ._type + "/" + aS)
                        });
                        if (aM) {
                            ad.responseType = ad.ARRAY_BUFFER;
                            ad.get(aO[aJ], {}, aQ.onload.bind(aQ));
                            return
                        } else {
                            HdGame.tlog("Not support " + aN[aN.length - 1] + " : " + aO[aJ]);
                            var aK = new y(y.COMPLETE);
                            aK.currentTarget = aK.target = aQ;
                            aQ.dispatchEvent(aK)
                        }
                    }
                },
                getCurrentTime: function () {
                    var aI = this;
                    if (aI.playing) {
                        return aI.data.currentTime - aI.currentSave + aI.currentTime
                    } else {
                        return aI.currentSave
                    }
                },
                setVolume: function (aI) {
                    var aJ = this;
                    aJ.volume = aI;
                    if (aJ.playing) {
                        aJ.volumeNode.gain.value = aI
                    }
                },
                getVolume: function () {
                    return this.volume
                },
                play: function (aL, aI, aK) {
                    var aJ = this;
                    if (aJ.length == 0) {
                        return
                    }
                    if (aI === "loop") {
                        aJ.loopIndex = 0;
                        aJ.loopLength = 99999
                    } else {
                        if (typeof aI !== Y) {
                            aJ.loopIndex = 0;
                            aJ.loopLength = aI
                        }
                    }
                    if (typeof aL !== Y) {
                        aJ.currentTime = aL;
                        aJ.currentStart = aL
                    }
                    if (typeof aK !== Y) {
                        aJ.currentTimeTo = aK > aJ.length ? aJ.length : aK
                    } else {
                        aJ.currentTimeTo = aJ.length
                    }
                    if (aJ.playing && aJ.bufferSource) {
                        aJ.soundCache.push(aJ.bufferSource)
                    }
                    aJ.data.loop = false;
                    aJ.playing = true;
                    if (aJ.timeout) {
                        clearTimeout(aJ.timeout);
                        delete aJ.timeout
                    }
                    aJ.timeout = setTimeout(aJ._onended.bind(aJ), (aJ.currentTimeTo - aJ.currentTime) * 1000);
                    aJ.bufferSource = aJ.data.createBufferSource();
                    aJ.bufferSource.buffer = aJ.buffer;
                    aJ.volumeNode = aJ.data.createGainNode();
                    aJ.volumeNode.gain.value = aJ.volume;
                    aJ.volumeNode.connect(aJ.data.destination);
                    aJ.bufferSource.connect(aJ.volumeNode);
                    aJ.currentSave = aJ.data.currentTime;
                    if (aJ.bufferSource.start) {
                        aJ.bufferSource.start(0, aJ.currentTime, aJ.length - aJ.currentTime)
                    } else {
                        aJ.bufferSource.noteGrainOn(0, aJ.currentTime, aJ.length - aJ.currentTime)
                    }
                },
                playSegment: function (aK, aJ, aI) {
                    this.playTo(aK, aK + aJ, aI)
                },
                playTo: function (aK, aJ, aI) {
                    this.play(aK, aI, aJ)
                },
                stopCache: function () {
                    var aJ = this;
                    var aK = null;
                    for (var aI = 0; aI < aJ.soundCache.length; aI++) {
                        aK = aJ.soundCache[aI];
                        if (aK.stop) {
                            aK.stop(0)
                        } else {
                            aK.noteOff(0)
                        }
                    }
                    aJ.soundCache = []
                },
                stop: function () {
                    var aI = this;
                    if (!aI.playing) {
                        return
                    }
                    if (aI.timeout) {
                        clearTimeout(aI.timeout);
                        delete aI.timeout
                    }
                    if (aI.bufferSource.stop) {
                        aI.bufferSource.stop(0)
                    } else {
                        aI.bufferSource.noteOff(0)
                    }
                    aI.stopCache();
                    aI.currentSave = aI.getCurrentTime();
                    aI.currentTime = aI.currentSave;
                    aI.playing = false
                },
                close: function () {
                    var aI = this;
                    if (!aI.playing) {
                        return
                    }
                    if (aI.timeout) {
                        clearTimeout(aI.timeout);
                        delete aI.timeout
                    }
                    if (aI.bufferSource.stop) {
                        aI.bufferSource.stop(0)
                    } else {
                        aI.bufferSource.noteOff(0)
                    }
                    aI.stopCache();
                    aI.playing = false;
                    aI.currentTime = 0;
                    aI.currentSave = 0
                },
                ll_check: function () {
                    var aI = this;
                    if (!aI.playing) {
                        return
                    }
                    if (aI.currentTimeTo < aI.data.currentTime - aI.currentSave + a.Container.time * 0.001) {
                        aI._onended()
                    }
                },
                die: function () {
                    a.Container.remove(this)
                }
            };
            for (var aE in aG) {
                aF.prototype[aE] = aG[aE]
            }
            return aF
        })();
    var x = (function () {
            function aF() {
                var aH = this;
                E(aH, Q, []);
                aH.length = 0;
                aH.loopIndex = 0;
                aH.loopLength = 1;
                aH.playing = false;
                aH.oncomplete = null;
                aH.onsoundcomplete = null;
                aH.currentStart = 0;
                aH.soundType = "LMedia";
                a.Container.add(this)
            }
            var aG = {
                onload: function () {
                    var aH = this;
                    if (aH.data.readyState) {
                        aH.length = aH.data.duration - (ae.android ? 0.1 : 0);
                        var aI = new y(y.COMPLETE);
                        aI.currentTarget = aH;
                        aI.target = aH.data;
                        aH.dispatchEvent(aI);
                        aH.data.removeEventListener("canplaythrough", aH._canplaythrough, false);
                        return
                    }
                    aH._canplaythrough = function () {
                        aH.onload()
                    };
                    aH.data.addEventListener("canplaythrough", aH._canplaythrough, false)
                },
                _onended: function () {
                    var aJ = this,
                        aI, aH;
                    aJ.dispatchEvent(y.SOUND_COMPLETE);
                    if (++aJ.loopIndex < aJ.loopLength) {
                            aI = aJ.loopIndex;
                            aH = aJ.loopLength;
                            aJ.close();
                            aJ.play(aJ.currentStart, aJ.loopLength, aJ.currentTimeTo);
                            aJ.loopIndex = aI
                        } else {
                            aJ.close()
                        }
                },
                load: function (aO) {
                    var aP = this;
                    if (Object.prototype.toString.apply(aO) == "[object HTMLAudioElement]") {
                        aP.data = aO;
                        aP.onload();
                        return
                    }
                    var aN, aM, aL, aI, aK, aH = {
                        mov: ["quicktime"],
                        "3gp": ["3gpp"],
                        midi: ["midi"],
                        mid: ["midi"],
                        ogv: ["ogg"],
                        m4a: ["acc"],
                        mp3: ["mpeg"],
                        wav: ["wav", "x-wav", "wave"],
                        wave: ["wav", "x-wav", "wave"],
                        aac: ["mp4", "aac"]
                    };
                    aN = aO.split(",");
                    for (aI = 0; aI < aN.length; aI++) {
                        aM = aN[aI].split(".");
                        aK = aM[aM.length - 1];
                        if (aH[aK]) {
                            aK = aH[aK]
                        } else {
                            aK = [aK]
                        }
                        aL = aK.some(function (aR, aQ, aS) {
                            return aP.data.canPlayType(aP._type + "/" + aR)
                        });
                        if (aL) {
                            aP.data.src = aN[aI];
                            aP.onload();
                            aP.data.load();
                            return
                        } else {
                            HdGame.tlog("Not support " + aM[aM.length - 1] + " : " + aN[aI]);
                            var aJ = new y(y.COMPLETE);
                            aJ.currentTarget = aJ.target = aP;
                            aP.dispatchEvent(aJ)
                        }
                    }
                    if (aP.oncomplete) {
                        aP.oncomplete({})
                    }
                },
                getCurrentTime: function () {
                    return this.data.currentTime
                },
                setVolume: function (aH) {
                    this.data.volume = aH
                },
                getVolume: function () {
                    return this.data.volume
                },
                play: function (aK, aH, aJ) {
                    var aI = this;
                    if (typeof aK != Y) {
                        aI.data.currentTime = aK
                    }
                    if (typeof aH != Y) {
                        aI.data.loop = aH
                    }
                    aI.data.play()
                },
                playSegment: function (aJ, aI, aH) {
                    this.playTo(aJ, aJ + aI, aH)
                },
                playTo: function (aJ, aI, aH) {
                    this.play(aJ, aH, aI)
                },
                stop: function () {
                    var aH = this;
                    aH.data.pause()
                },
                close: function () {
                    var aH = this;
                    aH.data.pause();
                    aH.data.currentTime = 0;
                    aH.currentSave = 0
                },
                ll_check: function () {
                    var aH = this;
                    if (!aH.playing) {
                        return
                    }
                    if (aH.data.duration != aH._ll_duration) {
                        aH._ll_duration = aH.data.duration;
                        aH.length = aH.data.duration - (ae.android ? 0.1 : 0)
                    }
                    if (aH.currentTimeTo < aH.data.currentTime + a.Container.time * 0.005) {
                        aH._onended()
                    }
                },
                die: function () {
                    a.Container.remove(this)
                }
            };
            for (var aE in aG) {
                aF.prototype[aE] = aG[aE]
            }
            return aF
        })();
    var a = (function () {
            function aE(aH) {
                var aI = this;
                aI.type = "LSound";
                aI._type = "audio";
                if (aE.webAudioEnabled && ae.webAudio) {
                    E(aI, T, [])
                } else {
                    E(aI, x, []);
                    try {
                        aI.data = new Audio()
                    } catch (aJ) {
                        HdGame.tlog("ReferenceError: Can't find variable: Audio");
                        aI.data = {}
                    }
                    aI.data.loop = false;
                    aI.data.autoplay = false;
                    aI.playing = false;
                    aI.data.addEventListener("play", function () {
                        aI.playing = true
                    }, false);
                    aI.data.addEventListener("pause", function () {
                        aI.playing = false
                    }, false)
                }
                if (aH) {
                    aI.load(aH)
                }
            }
            aE.TYPE_SOUND = "sound";
            aE.webAudioEnabled = false;
            var aG = location.protocol;
            if (aG == "http:" || aG == "https:") {
                if (typeof AudioContext !== Y) {
                    try {
                        T._context = new AudioContext()
                    } catch (aF) {}
                } else {
                    if (typeof webkitAudioContext !== Y) {
                        try {
                            T._context = new webkitAudioContext()
                        } catch (aF) {}
                    }
                }
                if (T._context) {
                    T.container.push(T._context);
                    aE.webAudioEnabled = true
                }
            }
            aE.Container = {
                ll_save: 0,
                time: 0,
                list: [],
                ll_show: function () {
                    var aK = aE.Container;
                    var aJ = (new Date()).getTime();
                    aK.time = aJ - (aK.ll_save ? aK.ll_save : aJ);
                    aK.ll_save = aJ;
                    var aH = aK.list;
                    for (var aI = aH.length - 1; aI >= 0; aI--) {
                        if (aH[aI]) {
                            aH[aI].ll_check()
                        }
                    }
                },
                add: function (aH) {
                    if (aE.Container.list.indexOf(aH) >= 0) {
                        return
                    }
                    aE.Container.list.push(aH)
                },
                remove: function (aJ) {
                    var aH = aE.Container.list;
                    for (var aI = aH.length - 1; aI >= 0; aI--) {
                        if (aH[aI].objectIndex == aJ.objectIndex) {
                            aH.splice(aI, 1);
                            break
                        }
                    }
                },
                stopOther: function (aJ) {
                    var aH = aE.Container.list;
                    for (var aI = aH.length - 1; aI >= 0; aI--) {
                        if (aH[aI].objectIndex != aJ.objectIndex) {
                            aH[aI].stop()
                        }
                    }
                }
            };
            ae.childList.push(aE.Container);
            return aE
        })();
    var ax = (function () {
            function aE(aF, aH) {
                var aG = this;
                aG.x = aF;
                aG.y = aH
            }
            aE.distance = function (aG, aF) {
                return aE.distance2(aG.x, aG.y, aF.x, aF.y)
            };
            aE.distance2 = function (aH, aJ, aG, aI) {
                var aF = aH - aG,
                    aK = aJ - aI;
                return Math.sqrt(aF * aF + aK * aK)
            };
            aE.interpolate = function (aH, aG, aF) {
                return new aE(aH.x + (aG.x - aH.x) * (1 - aF), aH.y + (aG.y - aH.y) * (1 - aF))
            };
            aE.polar = function (aG, aF) {
                return new aE(aG * Math.cos(aF), aG * Math.sin(aF))
            };
            aE.prototype = {
                toString: function () {
                    return "[object LPoint(" + this.x + "," + this.y + ")]"
                },
                length: function () {
                    return aE.distance2(this.x, this.y, 0, 0)
                },
                add: function (aF) {
                    return new aE(this.x + aF.x, this.y + aF.y)
                },
                clone: function () {
                    return new aE(this.x, this.y)
                },
                setTo: function (aF, aG) {
                    this.x = aF,
                    this.y = aG
                },
                copyFrom: function (aF) {
                    this.setTo(aF.x, aF.y)
                },
                equals: function (aF) {
                    return this.x == aF.x && this.y == aF.y
                },
                normalize: function (aF) {
                    var aG = this,
                        aH = aF / aG.length();
                    aG.x *= aH,
                    aG.y *= aH
                },
                offset: function (aG, aF) {
                    this.x += aG;
                    this.y += aF
                },
                subtract: function (aF) {
                    return new aE(this.x - aF.x, this.y - aF.y)
                }
            };
            return aE
        })();
    var O = (function () {
            function aE(aF, aJ, aG, aI) {
                var aH = this;
                aH.x = aF;
                aH.y = aJ;
                aH.width = aG;
                aH.height = aI;
                aH.setRectangle()
            }
            aE.prototype = {
                setRectangle: function () {
                    var aF = this;
                    aF.bottom = aF.y + aF.height;
                    aF.right = aF.x + aF.width;
                    aF.left = aF.x;
                    aF.top = aF.y
                },
                clone: function () {
                    var aF = this;
                    return new aE(aF.x, aF.y, aF.width, aF.height)
                },
                contains: function (aF, aH) {
                    var aG = this;
                    return aF >= aG.x && aF <= aG.right && aH >= aG.y && aH <= aG.bottom
                },
                containsRect: function (aG) {
                    var aF = this;
                    return aG.x >= aF.x && aG.right <= aF.right && aG.y >= aF.y && aG.bottom <= aF.bottom
                },
                equals: function (aF) {
                    var aG = this;
                    return aF.x == aG.x && aF.width == aG.width && aF.y == aG.y && aF.height == aG.height
                },
                inflate: function (aG, aF) {
                    var aH = this;
                    aH.width += aG;
                    aH.height += aF;
                    aH.setRectangle()
                },
                intersection: function (aH) {
                    var aI = this;
                    var aG = aI.x > aH.x ? aI.x : aH.x;
                    var aF = aI.y > aH.y ? aI.y : aH.y;
                    var aK = aI.right > aH.right ? aH.right : aI.right;
                    var aJ = aI.bottom > aH.bottom ? aH.bottom : aI.bottom;
                    if (aG <= aK && aF <= aJ) {
                        return new aE(aG, aF, aK, aJ)
                    } else {
                        return new aE(0, 0, 0, 0)
                    }
                },
                intersects: function (aH) {
                    var aI = this;
                    var aG = aI.x > aH.x ? aI.x : aH.x;
                    var aF = aI.y > aH.y ? aI.y : aH.y;
                    var aK = aI.right > aH.right ? aH.right : aI.right;
                    var aJ = aI.bottom > aH.bottom ? aH.bottom : aI.bottom;
                    return aG <= aK && aF <= aJ
                },
                isEmpty: function () {
                    var aF = this;
                    return aF.x == 0 && aF.y == 0 && aF.width == 0 && aF.height == 0
                },
                offset: function (aG, aF) {
                    var aH = this;
                    aH.x += aG;
                    aH.y += aF;
                    aH.setRectangle()
                },
                setEmpty: function () {
                    var aF = this;
                    aF.x = 0;
                    aF.y = 0;
                    aF.width = 0;
                    aF.height = 0;
                    aF.setRectangle()
                },
                setTo: function (aJ, aG, aF, aI) {
                    var aH = this;
                    aH.x = aJ;
                    aH.y = aG;
                    aH.width = aF;
                    aH.height = aI;
                    aH.setRectangle()
                },
                toString: function () {
                    var aF = this;
                    return "[object LRectangle(" + aF.x + "," + aF.y + "," + aF.width + "," + aF.height + ")]"
                },
                union: function (aF) {
                    var aG = this;
                    return new aE(aG.x > aF.x ? aF.x : aG.x, aG.y > aF.y ? aF.y : aG.y, aG.right > aF.right ? aG.right : aF.right, aG.bottom > aF.bottom ? aG.bottom : aF.bottom)
                }
            };
            return aE
        })();
    var l = (function () {
            function aF() {
                var aH = this;
                E(aH, r, []);
                aH.type = "LGraphics";
                aH.color = "#000000";
                aH.alpha = 1;
                aH.bitmap = null;
                aH.setList = new Array();
                aH.showList = new Array()
            }
            var aG = {
                ll_show: function () {
                    var aJ = this,
                        aI, aH = aJ.setList.length;
                    if (aH == 0) {
                            return
                        }
                    for (aI = 0; aI < aH; aI++) {
                            aJ.setList[aI].call(aJ);
                            if (ae.fpsStatus) {
                                ae.fpsStatus.graphics++
                            }
                        }
                },
                clone: function () {
                    var aK = this,
                        aI = new aF(),
                        aJ, aH, aL;
                    aI.color = aK.color;
                    aI.alpha = aK.alpha;
                    aI.bitmap = aK.bitmap;
                    for (aJ = 0, aH = aK.setList.length; aJ < aH; aJ++) {
                            aL = aK.setList[aJ];
                            aI.setList.push(aL)
                        }
                    for (aJ = 0, aH = aK.showList.length; aJ < aH; aJ++) {
                            aL = aK.showList[aJ];
                            aI.showList.push(aL)
                        }
                    return aI
                },
                lineCap: function (aH) {
                    var aI = this;
                    aI.setList.push(function () {
                        ae.canvas.lineCap = aH
                    })
                },
                lineJoin: function (aH) {
                    var aI = this;
                    aI.setList.push(function () {
                        ae.canvas.lineJoin = aH
                    })
                },
                lineWidth: function (aH) {
                    var aI = this;
                    aI.setList.push(function () {
                        ae.canvas.lineWidth = aH
                    })
                },
                strokeStyle: function (aI) {
                    var aH = this;
                    aH.setList.push(function () {
                        ae.canvas.strokeStyle = aI
                    })
                },
                stroke: function () {
                    var aH = this;
                    aH.setList.push(function () {
                        ae.canvas.stroke()
                    })
                },
                beginPath: function () {
                    var aH = this;
                    aH.setList.push(function () {
                        ae.canvas.beginPath()
                    })
                },
                closePath: function () {
                    var aH = this;
                    aH.setList.push(function () {
                        ae.canvas.closePath()
                    })
                },
                moveTo: function (aH, aJ) {
                    var aI = this;
                    aI.setList.push(function () {
                        ae.canvas.moveTo(aH, aJ)
                    });
                    aI.showList.push({
                        type: n.POINT,
                        arg: [aH, aJ]
                    })
                },
                lineTo: function (aH, aJ) {
                    var aI = this;
                    aI.setList.push(function () {
                        ae.canvas.lineTo(aH, aJ)
                    });
                    aI.showList.push({
                        type: n.POINT,
                        arg: [aH, aJ]
                    })
                },
                rect: function (aH, aL, aI, aK) {
                    var aJ = this;
                    aJ.setList.push(function () {
                        ae.canvas.rect(aH, aL, aI, aK)
                    });
                    aJ.showList.push({
                        type: n.RECT,
                        arg: [aH, aL, aI, aK]
                    })
                },
                fillStyle: function (aI) {
                    var aH = this;
                    aH.setList.push(function () {
                        ae.canvas.fillStyle = aI
                    })
                },
                fill: function () {
                    var aH = this;
                    aH.setList.push(function () {
                        ae.canvas.fill()
                    })
                },
                arc: function (aI, aN, aL, aH, aK, aM) {
                    var aJ = this;
                    aJ.setList.push(function () {
                        ae.canvas.arc(aI, aN, aL, aH, aK, aM)
                    });
                    aJ.showList.push({
                        type: n.ARC,
                        arg: aH
                    })
                },
                lineStyle: function (aH, aJ) {
                    var aI = this,
                        aK;
                    if (aJ == null) {
                            aJ = aI.color
                        }
                    aI.color = aJ;
                    aI.setList.push(function () {
                            aK = ae.canvas;
                            aK.lineWidth = aH;
                            aK.strokeStyle = aJ
                        })
                },
                clear: function () {
                    var aH = this;
                    aH.bitmap = null;
                    aH.setList.length = 0;
                    aH.showList.length = 0
                },
                beginBitmapFill: function (aH) {
                    var aI = this;
                    aI.setList.push(function () {
                        aI.bitmap = aH
                    })
                },
                drawEllipse: function (aH, aL, aK, aI, aM) {
                    var aJ = this;
                    aJ.setList.push(function () {
                        var aU, aW, aV, aX, aR, aQ, aP, aN, aY, aT, aS, aO;
                        aU = ae.canvas;
                        aU.beginPath();
                        aQ = 0.5522848;
                        aW = aK[0];
                        aV = aK[1];
                        aX = aK[2];
                        aR = aK[3];
                        aP = (aX / 2) * aQ;
                        aN = (aR / 2) * aQ;
                        aY = aW + aX;
                        aT = aV + aR;
                        aS = aW + aX / 2;
                        aO = aV + aR / 2;
                        aU.moveTo(aW, aO);
                        aU.bezierCurveTo(aW, aO - aN, aS - aP, aV, aS, aV);
                        aU.bezierCurveTo(aS + aP, aV, aY, aO - aN, aY, aO);
                        aU.bezierCurveTo(aY, aO + aN, aS + aP, aT, aS, aT);
                        aU.bezierCurveTo(aS - aP, aT, aW, aO + aN, aW, aO);
                        if (aJ.bitmap) {
                            aU.save();
                            aU.clip();
                            aU.drawImage(aJ.bitmap.image, aJ.bitmap.x, aJ.bitmap.y, aJ.bitmap.width, aJ.bitmap.height, 0, 0, aJ.bitmap.width, aJ.bitmap.height);
                            aU.restore();
                            aJ.bitmap = null;
                            return
                        }
                        if (aI) {
                            aU.fillStyle = aM;
                            aU.fill()
                        }
                        if (aH > 0) {
                            aU.lineWidth = aH;
                            aU.strokeStyle = aL;
                            aU.stroke()
                        }
                    });
                    aJ.showList.push({
                        type: n.RECT,
                        arg: aK
                    })
                },
                drawArc: function (aH, aL, aK, aI, aN, aM) {
                    var aJ = this;
                    aJ.setList.push(function () {
                        var aO = ae.canvas;
                        aO.beginPath();
                        if (aK.length > 6 && aK[6] && !aM) {
                            aO.moveTo(aK[0], aK[1])
                        }
                        aO.arc(aK[0], aK[1], aK[2], aK[3], aK[4], aK[5]);
                        if (aK.length > 6 && aK[6] && !aM) {
                            aO.lineTo(aK[0], aK[1])
                        }
                        if (aJ.bitmap) {
                            aO.save();
                            aO.clip();
                            aO.drawImage(aJ.bitmap.image, aJ.bitmap.x, aJ.bitmap.y, aJ.bitmap.width, aJ.bitmap.height, 0, 0, aJ.bitmap.width, aJ.bitmap.height);
                            aO.restore();
                            aJ.bitmap = null;
                            return
                        }
                        if (aI) {
                            aO.fillStyle = aN;
                            aO.fill()
                        }
                        if (aH > 0) {
                            aO.lineWidth = aH;
                            aO.strokeStyle = aL;
                            aO.stroke()
                        }
                    });
                    aJ.showList.push({
                        type: n.ARC,
                        arg: aK
                    })
                },
                drawRect: function (aH, aL, aK, aI, aM) {
                    var aJ = this;
                    aJ.setList.push(function () {
                        var aN = ae.canvas;
                        aN.beginPath();
                        aN.rect(aK[0], aK[1], aK[2], aK[3]);
                        aN.closePath();
                        if (aJ.bitmap) {
                            aN.save();
                            aN.clip();
                            aN.drawImage(aJ.bitmap.image, aJ.bitmap.x, aJ.bitmap.y, aJ.bitmap.width, aJ.bitmap.height, 0, 0, aJ.bitmap.width, aJ.bitmap.height);
                            aN.restore();
                            aJ.bitmap = null;
                            return
                        }
                        if (aI) {
                            aN.fillStyle = aM;
                            aN.fill()
                        }
                        if (aH > 0) {
                            aN.lineWidth = aH;
                            aN.strokeStyle = aL;
                            aN.stroke()
                        }
                    });
                    aJ.showList.push({
                        type: n.RECT,
                        arg: aK
                    })
                },
                drawRoundRect: function (aH, aL, aK, aI, aM) {
                    var aJ = this;
                    aJ.setList.push(function () {
                        var aN = ae.canvas;
                        aN.beginPath();
                        aN.moveTo(aK[0] + aK[4], aK[1]);
                        aN.lineTo(aK[0] + aK[2] - aK[4], aK[1]);
                        aN.arcTo(aK[0] + aK[2], aK[1], aK[0] + aK[2], aK[1] + aK[4], aK[4]);
                        aN.lineTo(aK[0] + aK[2], aK[1] + aK[3] - aK[4]);
                        aN.arcTo(aK[0] + aK[2], aK[1] + aK[3], aK[0] + aK[2] - aK[4], aK[1] + aK[3], aK[4]);
                        aN.lineTo(aK[0] + aK[4], aK[1] + aK[3]);
                        aN.arcTo(aK[0], aK[1] + aK[3], aK[0], aK[1] + aK[3] - aK[4], aK[4]);
                        aN.lineTo(aK[0], aK[1] + aK[4]);
                        aN.arcTo(aK[0], aK[1], aK[0] + aK[4], aK[1], aK[4]);
                        aN.closePath();
                        if (aJ.bitmap) {
                            aN.save();
                            aN.clip();
                            aN.drawImage(aJ.bitmap.image, 0, 0, aJ.bitmap.width, aJ.bitmap.height, 0, 0, aJ.bitmap.width, aJ.bitmap.height);
                            aN.restore();
                            aJ.bitmap = null;
                            return
                        }
                        if (aI) {
                            aN.fillStyle = aM;
                            aN.fill()
                        }
                        if (aH > 0) {
                            aN.lineWidth = aH;
                            aN.strokeStyle = aL;
                            aN.stroke()
                        }
                    });
                    aJ.showList.push({
                        type: n.RECT,
                        arg: aK
                    })
                },
                drawVertices: function (aH, aL, aI, aJ, aM) {
                    var aK = this;
                    if (aI.length < 3) {
                        return
                    }
                    aK.setList.push(function () {
                        var aQ = ae.canvas;
                        aQ.beginPath();
                        aQ.moveTo(aI[0][0], aI[0][1]);
                        var aO, aN = aI.length,
                            aP;
                        for (aO = 1; aO < aN; aO++) {
                                aP = aI[aO];
                                aQ.lineTo(aP[0], aP[1])
                            }
                        aQ.lineTo(aI[0][0], aI[0][1]);
                        aQ.closePath();
                        if (aK.bitmap) {
                                aQ.save();
                                aQ.clip();
                                aQ.drawImage(aK.bitmap.image, aK.bitmap.x, aK.bitmap.y, aK.bitmap.width, aK.bitmap.height, 0, 0, aK.bitmap.width, aK.bitmap.height);
                                aQ.restore();
                                aK.bitmap = null;
                                return
                            }
                        if (aJ) {
                                aQ.fillStyle = aM;
                                aQ.fill()
                            }
                        if (aH > 0) {
                                aQ.lineWidth = aH;
                                aQ.strokeStyle = aL;
                                aQ.closePath();
                                aQ.stroke()
                            }
                    });
                    aK.showList.push({
                        type: n.VERTICES,
                        arg: aI
                    })
                },
                drawTriangles: function (aM, aH, aP, aO, aI) {
                    var aQ = this;
                    var aL, aK, aJ = aH.length,
                        aN;
                    aQ.setList.push(function () {
                            aN = ae.canvas;
                            var a0 = aM,
                                aX, aR, aZ;
                            for (aL = 0, aK = 0; aL < aJ; aL += 3) {
                                    aX = 0;
                                    aN.save();
                                    aN.beginPath();
                                    aN.moveTo(a0[aH[aL] * 2], a0[aH[aL] * 2 + 1]);
                                    aN.lineTo(a0[aH[aL + 1] * 2], a0[aH[aL + 1] * 2 + 1]);
                                    aN.lineTo(a0[aH[aL + 2] * 2], a0[aH[aL + 2] * 2 + 1]);
                                    aN.lineTo(a0[aH[aL] * 2], a0[aH[aL] * 2 + 1]);
                                    aN.closePath();
                                    if (aO) {
                                        aN.lineWidth = aO;
                                        aN.strokeStyle = aI;
                                        aN.stroke()
                                    }
                                    aN.clip();
                                    if (aL % 6 == 0) {
                                        aZ = -1;
                                        var aY = (aP[aH[aL + 1 + aK] * 2] - aP[aH[aL + aK] * 2]) * aQ.bitmap.width;
                                        var aU = (aP[aH[aL + 2] * 2 + 1] - aP[aH[aL] * 2 + 1]) * aQ.bitmap.height;
                                        if (aK == 0 && aY < 0) {
                                            for (aR = aL + 9; aR < aJ; aR += 3) {
                                                if (aP[aH[aL + 2] * 2 + 1] == aP[aH[aR + 2] * 2 + 1]) {
                                                    aK = aR - aL;
                                                    break
                                                }
                                            }
                                            if (aK == 0) {
                                                aK = aJ - aL
                                            }
                                            aY = (aP[aH[aL + 1 + aK] * 2] - aP[aH[aL + aK] * 2]) * aQ.bitmap.width
                                        }
                                        if (aL + aK >= aJ) {
                                            aY = (aP[aH[aL + aK - aJ] * 2] - aP[aH[aL + 1] * 2]) * aQ.bitmap.width;
                                            aZ = aP[aH[aL] * 2] == 1 ? 0 : aQ.bitmap.width * aP[aH[aL] * 2] + aY;
                                            if (aZ > aQ.bitmap.width) {
                                                aZ -= aQ.bitmap.width
                                            }
                                        } else {
                                            aZ = aQ.bitmap.width * aP[aH[aL + aK] * 2]
                                        }
                                        sh = aQ.bitmap.height * aP[aH[aL] * 2 + 1];
                                        if (aU < 0) {
                                            aU = (aP[aH[aL + 2 - (aL > 0 ? 6 : -6)] * 2 + 1] - aP[aH[aL - (aL > 0 ? 6 : -6)] * 2 + 1]) * aQ.bitmap.height;
                                            sh = 0
                                        }
                                        var aW = (a0[aH[aL + 1] * 2] - a0[aH[aL] * 2]) / aY;
                                        var aV = (a0[aH[aL + 1] * 2 + 1] - a0[aH[aL] * 2 + 1]) / aY;
                                        var aT = (a0[aH[aL + 2] * 2] - a0[aH[aL] * 2]) / aU;
                                        var aS = (a0[aH[aL + 2] * 2 + 1] - a0[aH[aL] * 2 + 1]) / aU;
                                        aN.transform(aW, aV, aT, aS, a0[aH[aL] * 2], a0[aH[aL] * 2 + 1]);
                                        aN.drawImage(aQ.bitmap.image, aQ.bitmap.x + aZ, aQ.bitmap.y + sh, aY, aU, 0, 0, aY, aU)
                                    } else {
                                        var aY = (aP[aH[aL + 2 + aK] * 2] - aP[aH[aL + 1 + aK] * 2]) * aQ.bitmap.width;
                                        var aU = (aP[aH[aL + 2] * 2 + 1] - aP[aH[aL] * 2 + 1]) * aQ.bitmap.height;
                                        if (aK == 0 && aY < 0) {
                                            for (aR = aL + 9; aR < aJ; aR += 3) {
                                                if (aP[aH[aL + 2] * 2 + 1] == aP[aH[aR + 2] * 2 + 1]) {
                                                    aK = aR - aL;
                                                    break
                                                }
                                            }
                                            if (aK == 0) {
                                                aK = aJ - aL
                                            }
                                            aY = (aP[aH[aL + 2 + aK] * 2] - aP[aH[aL + 1 + aK] * 2]) * aQ.bitmap.width
                                        }
                                        if (aL + 1 + aK >= aJ) {
                                            aY = (aP[aH[aL + 1 + aK - aJ] * 2] - aP[aH[aL + 2] * 2]) * aQ.bitmap.width;
                                            aZ = aP[aH[aL + 1] * 2] == 1 ? 0 : aQ.bitmap.width * aP[aH[aL + 1] * 2] + aY;
                                            if (aZ > aQ.bitmap.width) {
                                                aZ -= aQ.bitmap.width
                                            }
                                        } else {
                                            aZ = aQ.bitmap.width * aP[aH[aL + 1 + aK] * 2]
                                        }
                                        sh = aQ.bitmap.height * aP[aH[aL] * 2 + 1];
                                        if (aU < 0) {
                                            aU = (aP[aH[aL + 2 - (aL > 0 ? 6 : -6)] * 2 + 1] - aP[aH[aL - (aL > 0 ? 6 : -6)] * 2 + 1]) * aQ.bitmap.height;
                                            sh = 0
                                        }
                                        var aW = (a0[aH[aL + 2] * 2] - a0[aH[aL + 1] * 2]) / aY;
                                        var aV = (a0[aH[aL + 2] * 2 + 1] - a0[aH[aL + 1] * 2 + 1]) / aY;
                                        var aT = (a0[aH[aL + 2] * 2] - a0[aH[aL] * 2]) / aU;
                                        var aS = (a0[aH[aL + 2] * 2 + 1] - a0[aH[aL] * 2 + 1]) / aU;
                                        aN.transform(aW, aV, aT, aS, a0[aH[aL + 1] * 2], a0[aH[aL + 1] * 2 + 1]);
                                        aN.drawImage(aQ.bitmap.image, aQ.bitmap.x + aZ, aQ.bitmap.y + sh, aY, aU, 0, -aU, aY, aU)
                                    }
                                    aN.restore()
                                }
                        })
                },
                drawLine: function (aH, aK, aJ) {
                    var aI = this;
                    aI.setList.push(function () {
                        var aL = ae.canvas;
                        aL.beginPath();
                        aL.moveTo(aJ[0], aJ[1]);
                        aL.lineTo(aJ[2], aJ[3]);
                        aL.lineWidth = aH;
                        aL.strokeStyle = aK;
                        aL.closePath();
                        aL.stroke()
                    });
                    aI.showList.push({
                        type: n.LINE,
                        arg: aJ
                    })
                },
                add: function (aH) {
                    this.setList.push(aH)
                },
                remove: function (aI) {
                    for (var aH = 0, aJ = this.setList.length; aH < aJ; aH++) {
                        if (this.setList[aH] === aI) {
                            this.setList.splice(aH, 1);
                            return
                        }
                    }
                },
                ismouseon: function (aI, aJ) {
                    var aH = this;
                    if (aI == null || aI == Y || aH.showList.length == 0 || !aH.parent) {
                        return false
                    }
                    return aH.parent.ismouseonShapes(aH.showList, aI.offsetX, aI.offsetY)
                },
                getWidth: function () {
                    var aN = this,
                        aL, aO, aM, aH, aK, aJ, aI;
                    for (aL = 0, aJ = aN.showList.length; aL < aJ; aL++) {
                            if (aN.showList[aL].type == n.RECT) {
                                if (aM > aN.showList[aL].arg[0] || typeof aM == Y) {
                                    aM = aN.showList[aL].arg[0]
                                }
                                if (aH < aN.showList[aL].arg[0] + aN.showList[aL].arg[2] || typeof aH == Y) {
                                    aH = aN.showList[aL].arg[0] + aN.showList[aL].arg[2]
                                }
                            } else {
                                if (aN.showList[aL].type == n.ARC) {
                                    if (aM > aN.showList[aL].arg[0] - aN.showList[aL].arg[2] || typeof aM == Y) {
                                        aM = aN.showList[aL].arg[0] - aN.showList[aL].arg[2]
                                    }
                                    if (aH < aN.showList[aL].arg[0] + aN.showList[aL].arg[2] || typeof aH == Y) {
                                        aH = aN.showList[aL].arg[0] + aN.showList[aL].arg[2]
                                    }
                                } else {
                                    if (aN.showList[aL].type == n.VERTICES) {
                                        for (aO = 0, aI = aN.showList[aL].arg.length; aO < aI; aO++) {
                                            aK = aN.showList[aL].arg[aO];
                                            if (aM > aK[0] || typeof aM == Y) {
                                                aM = aK[0]
                                            }
                                            if (aH < aK[0] || typeof aH == Y) {
                                                aH = aK[0]
                                            }
                                        }
                                    } else {
                                        if (aN.showList[aL].type == n.LINE) {
                                            if (aM > aN.showList[aL].arg[0] || typeof aM == Y) {
                                                aM = aN.showList[aL].arg[0]
                                            }
                                            if (aM > aN.showList[aL].arg[2] || typeof aM == Y) {
                                                aM = aN.showList[aL].arg[2]
                                            }
                                            if (aH < aN.showList[aL].arg[0] || typeof aH == Y) {
                                                aH = aN.showList[aL].arg[0]
                                            }
                                            if (aH < aN.showList[aL].arg[2] || typeof aH == Y) {
                                                aH = aN.showList[aL].arg[2]
                                            }
                                        } else {
                                            if (aN.showList[aL].type == n.POINT) {
                                                if (aM > aN.showList[aL].arg[0] || typeof aM == Y) {
                                                    aM = aN.showList[aL].arg[0]
                                                }
                                                if (aH < aN.showList[aL].arg[0] || typeof aH == Y) {
                                                    aH = aN.showList[aL].arg[0]
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    if (typeof aM == Y) {
                            aM = aH = 0
                        }
                    aN.left = aM;
                    if (aJ > 0 && aH == aM) {
                            aH = aM + 1
                        }
                    return aH - aM
                },
                getHeight: function () {
                    var aN = this,
                        aL = null,
                        aO = null,
                        aJ, aI, aM, aH, aK;
                    for (aL = 0, aJ = aN.showList.length; aL < aJ; aL++) {
                            if (aN.showList[aL].type == n.RECT) {
                                if (aM > aN.showList[aL].arg[1] || typeof aM == Y) {
                                    aM = aN.showList[aL].arg[1]
                                }
                                if (aH < aN.showList[aL].arg[1] + aN.showList[aL].arg[3] || typeof aH == Y) {
                                    aH = aN.showList[aL].arg[1] + aN.showList[aL].arg[3]
                                }
                            } else {
                                if (aN.showList[aL].type == n.ARC) {
                                    if (aM > aN.showList[aL].arg[1] - aN.showList[aL].arg[2] || typeof aM == Y) {
                                        aM = aN.showList[aL].arg[1] - aN.showList[aL].arg[2]
                                    }
                                    if (aH < aN.showList[aL].arg[1] + aN.showList[aL].arg[2] || typeof aH == Y) {
                                        aH = aN.showList[aL].arg[1] + aN.showList[aL].arg[2]
                                    }
                                } else {
                                    if (aN.showList[aL].type == n.VERTICES) {
                                        for (aO = 0, aI = aN.showList[aL].arg.length; aO < aI; aO++) {
                                            aK = aN.showList[aL].arg[aO];
                                            if (aM > aK[1] || typeof aM == Y) {
                                                aM = aK[1]
                                            }
                                            if (aH < aK[1] || typeof aH == Y) {
                                                aH = aK[1]
                                            }
                                        }
                                    } else {
                                        if (aN.showList[aL].type == n.LINE) {
                                            if (aM > aN.showList[aL].arg[1] || typeof aM == Y) {
                                                aM = aN.showList[aL].arg[1]
                                            }
                                            if (aM > aN.showList[aL].arg[3] || typeof aM == Y) {
                                                aM = aN.showList[aL].arg[3]
                                            }
                                            if (aH < aN.showList[aL].arg[1] || typeof aH == Y) {
                                                aH = aN.showList[aL].arg[1]
                                            }
                                            if (aH < aN.showList[aL].arg[3] || typeof aH == Y) {
                                                aH = aN.showList[aL].arg[3]
                                            }
                                        } else {
                                            if (aN.showList[aL].type == n.POINT) {
                                                if (aM > aN.showList[aL].arg[1] || typeof aM == Y) {
                                                    aM = aN.showList[aL].arg[1]
                                                }
                                                if (aH < aN.showList[aL].arg[1] || typeof aH == Y) {
                                                    aH = aN.showList[aL].arg[1]
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    if (typeof aM == Y) {
                            aM = aH = 0
                        }
                    aN.top = aM;
                    if (aJ > 0 && aH == aM) {
                            aH = aM + 1
                        }
                    return aH - aM
                },
                startX: function () {
                    var aH = this;
                    aH.getWidth();
                    return aH.left
                },
                startY: function () {
                    var aH = this;
                    aH.getHeight();
                    return aH.top
                }
            };
            for (var aE in aG) {
                aF.prototype[aE] = aG[aE]
            }
            return aF
        })();
    var n = (function () {
            function aE(aH) {
                var aI = this;
                E(aI, h, []);
                aI.type = "LShape";
                aI.graphics = new l();
                aI.graphics.parent = aI;
                if (aH) {
                    am(aI)
                }
            }
            aE.POINT = "point";
            aE.LINE = "line";
            aE.ARC = "arc";
            aE.RECT = "rect";
            aE.VERTICES = "vertices";
            var aG = {
                _ll_show: function (aI) {
                    var aH = this;
                    aH.graphics.ll_show()
                },
                getWidth: function (aJ) {
                    var aI = this,
                        aL, aM, aK = aI.graphics.startX(),
                        aH = aK + aI.graphics.getWidth();
                    if (aJ && aI.mask) {
                            aL = aI.mask._startX ? aI.mask._startX() : aI.mask.startX();
                            aM = aI.mask.getWidth();
                            if (aK < aL) {
                                aK = aL
                            }
                            if (aH > aL + aM) {
                                aH = aL + aM
                            }
                        }
                    aI.ll_left = aI.x + aK;
                    aI.ll_right = aI.x + aH;
                    return (aH - aK) * aI.scaleX
                },
                getHeight: function (aK) {
                    var aJ = this,
                        aM, aI, aL = aJ.graphics.startY(),
                        aH = aL + aJ.graphics.getHeight();
                    if (aK && aJ.mask) {
                            aM = aJ.mask._startY ? aJ.mask._startY() : aJ.mask.startY();
                            aI = aJ.mask.getHeight();
                            if (aL < aM) {
                                aL = aM
                            }
                            if (aH > aM + aI) {
                                aH = aM + aI
                            }
                        }
                    aJ.ll_top = aJ.y + aL;
                    aJ.ll_bottom = aJ.y + aH;
                    return (aH - aL) * aJ.scaleY
                },
                _startX: function () {
                    var aH = this;
                    aH.getWidth();
                    return aH.ll_left
                },
                startX: function () {
                    var aH = this;
                    return aH._startX() * aH.scaleX
                },
                _startY: function () {
                    var aH = this;
                    aH.getHeight();
                    return aH.ll_top
                },
                startY: function () {
                    var aH = this;
                    return aH._startY() * aH.scaleY
                },
                clone: function () {
                    var aI = this,
                        aH = new aE(),
                        aK, aJ;
                    aH.copyProperty(aI);
                    aH.graphics = aI.graphics.clone();
                    aH.graphics.parent = aH;
                    return aH
                },
                ismouseon: function (aJ, aL) {
                    var aI = this,
                        aH = false,
                        aK;
                    if (!aI.visible || aJ == null) {
                            return false
                        }
                    if (aI.mask) {
                            if (!aI.mask.parent) {
                                aI.mask.parent = aI.parent
                            }
                            if (!aI.mask.ismouseon(aJ, aL)) {
                                return false
                            }
                        }
                    aK = {
                            x: aI.x * aL.scaleX + aL.x,
                            y: aI.y * aL.scaleY + aL.y,
                            scaleX: aL.scaleX * aI.scaleX,
                            scaleY: aL.scaleY * aI.scaleY
                        };
                    if (aI.graphics) {
                            aH = aI.graphics.ismouseon(aJ, aK)
                        }
                    return aH
                },
                die: function () {
                    var aH = this;
                    aH.graphics.clear()
                }
            };
            for (var aF in aG) {
                aE.prototype[aF] = aG[aF]
            }
            return aE
        })();
    var X = (function () {
            function aG(aH) {
                var aI = this;
                E(aI, ag, []);
                aI.type = "LSprite";
                aI.rotatex;
                aI.rotatey;
                aI.graphics = new l();
                aI.underGraphics = false;
                aI.graphics.parent = aI;
                aI.box2dBody = null;
                aI.shapes = new Array();
                aI.dragRange = null;
                aI.useCursor = null;
                if (aH) {
                    am(aI)
                }
            }
            var aF = {
                setRotate: function (aI) {
                    var aH = this;
                    if (aH.box2dBody) {
                        aH.box2dBody.SetAngle(aI)
                    } else {
                        aH.rotate = aI
                    }
                },
                _rotateReady: function () {
                    var aH = this;
                    if (aH.box2dBody) {
                        if ((typeof aH.rotatex) == Y) {
                            aH.getRotateXY()
                        }
                        aH.x = aH.box2dBody.GetPosition().x * ae.box2d.drawScale - aH.parent.x - aH.rotatex;
                        aH.y = aH.box2dBody.GetPosition().y * ae.box2d.drawScale - aH.parent.y - aH.rotatey;
                        aH.rotate = aH.box2dBody.GetAngle()
                    }
                },
                _ll_show: function (aI) {
                    var aH = this;
                    if (aH.underGraphics) {
                        ae.show(aH.childList);
                        aH.graphics.ll_show()
                    } else {
                        aH.graphics.ll_show();
                        ae.show(aH.childList)
                    }
                    aH._ll_debugShape()
                },
                startDrag: function (aI) {
                    var aH = this;
                    if (aH.ll_dragStart) {
                        return
                    }
                    aH.ll_touchPointID = aI;
                    aH.ll_dragGlobalPoint = aH.parent.localToGlobal(new ax(aH.x, aH.y));
                    aH.ll_dragMX = af;
                    aH.ll_dragMY = ac;
                    aH.ll_dragStart = true;
                    ae.dragList.push(aH)
                },
                stopDrag: function () {
                    var aJ = this,
                        aI, aH;
                    for (aI = 0, aH = ae.dragList.length; aI < aH; aI++) {
                            if (aJ.objectIndex == ae.dragList[aI].objectIndex) {
                                aJ.ll_dragStart = false;
                                ae.dragList.splice(aI, 1);
                                break
                            }
                        }
                },
                getRotateXY: function (aH, aJ) {
                    var aI = this;
                    if (!aH || !aJ) {
                        aH = aI.getWidth();
                        aJ = aI.getHeight()
                    }
                    aI.rotatex = aH / 2;
                    aI.rotatey = aJ / 2
                },
                getWidth: function (aL) {
                    var aR = this,
                        aK, aJ, aH, aN, aM, aP, aQ, aI = aR.graphics.startX(),
                        aO = aI + aR.graphics.getWidth();
                    for (aK = 0, aJ = aR.childList.length; aK < aJ; aK++) {
                            aH = aR.childList[aK];
                            if (typeof aH.visible == Y || !aH.visible) {
                                continue
                            }
                            aN = aH.x;
                            if (typeof aH._startX == "function") {
                                aN = aH._startX()
                            }
                            aM = aN + aH.getWidth(aL);
                            if (aN < aI) {
                                aI = aN
                            }
                            if (aM > aO) {
                                aO = aM
                            }
                        }
                    if (aL && aR.mask) {
                            aP = aR.mask._startX ? aR.mask._startX() : aR.mask.startX();
                            aQ = aR.mask.getWidth();
                            if (aI < aP) {
                                aI = aP
                            }
                            if (aO > aP + aQ) {
                                aO = aP + aQ
                            }
                        }
                    aR.ll_left = aR.x + aI;
                    aR.ll_right = aR.x + aO;
                    return (aO - aI) * aR.scaleX
                },
                getHeight: function (aL) {
                    var aR = this,
                        aK, aJ, aI, aP, aO, aQ, aM, aN = aR.graphics.startY(),
                        aH = aN + aR.graphics.getHeight();
                    for (aK = 0, aJ = aR.childList.length; aK < aJ; aK++) {
                            aI = aR.childList[aK];
                            if (typeof aI.visible == Y || !aI.visible) {
                                continue
                            }
                            aP = aI.y;
                            if (typeof aI._startY == "function") {
                                aP = aI._startY()
                            }
                            aO = aP + aI.getHeight(aL);
                            if (aP < aN) {
                                aN = aP
                            }
                            if (aO > aH) {
                                aH = aO
                            }
                        }
                    if (aL && aR.mask) {
                            aQ = aR.mask._startY ? aR.mask._startY() : aR.mask.startY();
                            aM = aR.mask.getHeight();
                            if (aN < aQ) {
                                aN = aQ
                            }
                            if (aH > aQ + aM) {
                                aH = aQ + aM
                            }
                        }
                    aR.ll_top = aR.y + aN;
                    aR.ll_bottom = aR.y + aH;
                    return (aH - aN) * aR.scaleY
                },
                _startX: function () {
                    var aH = this;
                    aH.getWidth();
                    return aH.ll_left
                },
                startX: function () {
                    var aH = this;
                    return aH._startX() * aH.scaleX
                },
                _startY: function () {
                    var aH = this;
                    aH.getHeight();
                    return aH.ll_top
                },
                startY: function () {
                    var aH = this;
                    return aH._startY() * aH.scaleY
                },
                _ll_loopframe: function () {
                    this.dispatchEvent(y.ENTER_FRAME)
                },
                clone: function () {
                    var aK = this,
                        aI = new aG(),
                        aM, aL, aJ, aH;
                    aI.copyProperty(aK);
                    aI.graphics = aK.graphics.clone();
                    aI.graphics.parent = aI;
                    aI.childList.length = 0;
                    for (aJ = 0, aH = aK.childList.length; aJ < aH; aJ++) {
                            aM = aK.childList[aJ];
                            if (aM.clone) {
                                aL = aM.clone();
                                aL.parent = aI;
                                aI.childList.push(aL)
                            }
                        }
                    return aI
                },
                _mevent: function (aJ) {
                    var aI = this,
                        aH;
                    for (aH = 0; aH < aI.mouseList.length; aH++) {
                            var aK = aI.mouseList[aH];
                            if (aK.type == aJ) {
                                return true
                            }
                        }
                    return false
                },
                ll_dispatchMouseEvent: function (aK, aL, aN, aI, aH) {
                    var aJ = this;
                    if (!aJ.mouseEnabled) {
                        return
                    }
                    for (aE = 0; aE < aJ.mouseList.length; aE++) {
                        var aM = aJ.mouseList[aE];
                        if (aM.type == aK) {
                            aL.selfX = (aI - (aJ.x * aN.scaleX + aN.x)) / (aN.scaleX * aJ.scaleX);
                            aL.selfY = (aH - (aJ.y * aN.scaleY + aN.y)) / (aN.scaleY * aJ.scaleY);
                            aL.currentTarget = aL.clickTarget = aJ;
                            if (!aL.target) {
                                aL.target = aJ
                            }
                            aM.listener(aL, aJ)
                        }
                    }
                },
                ll_mouseout: function (aM, aL, aN, aJ, aH) {
                    var aK = this;
                    if (aL == g.MOUSE_MOVE && aK.ll_mousein) {
                        aK.ll_mousein = false;
                        if (aK._mevent(g.MOUSE_OUT)) {
                            aK.ll_dispatchMouseEvent(g.MOUSE_OUT, aM, aN, aJ, aH)
                        }
                        if (aK.mouseChildren) {
                            for (var aI = aK.childList.length - 1; aI >= 0; aI--) {
                                if (aK.childList[aI].mouseEvent && aK.childList[aI].ll_mouseout) {
                                    aK.childList[aI].ll_mouseout(aM, aL, aN, aJ, aH)
                                }
                            }
                        }
                    }
                },
                mouseEvent: function (aN, aO, aJ) {
                    if (!aN) {
                        return false
                    }
                    var aQ = this,
                        aL, aK, aI = aN.offsetX,
                        aH = aN.offsetY,
                        aM, aP;
                    if (!aQ.visible) {
                            return false
                        }
                    if (aJ == null) {
                            aJ = {
                                x: 0,
                                y: 0,
                                scaleX: 1,
                                scaleY: 1
                            }
                        }
                    aM = aQ.ismouseon(aN, aJ);
                    if (aM) {
                            if (ae.os == aA && aQ.useCursor && aO == g.MOUSE_MOVE) {
                                ae.cursor = aQ.useCursor
                            }
                            if (aO == g.MOUSE_MOVE && !aQ.ll_mousein) {
                                aQ.ll_mousein = true;
                                if (aQ._mevent(g.MOUSE_OVER)) {
                                    aQ.ll_dispatchMouseEvent(g.MOUSE_OVER, aN, aJ, aI, aH)
                                }
                            }
                            if (aQ.mouseChildren) {
                                aP = {
                                    x: aQ.x * aJ.scaleX + aJ.x,
                                    y: aQ.y * aJ.scaleY + aJ.y,
                                    scaleX: aJ.scaleX * aQ.scaleX,
                                    scaleY: aJ.scaleY * aQ.scaleY
                                };
                                for (aK = aQ.childList.length - 1; aK >= 0; aK--) {
                                    if (aQ.childList[aK].mouseEvent) {
                                        aL = aQ.childList[aK].mouseEvent(aN, aO, aP);
                                        if (aL) {
                                            aN.target = aQ.childList[aK];
                                            if (aO != g.MOUSE_MOVE) {
                                                break
                                            }
                                        }
                                    }
                                }
                                if (aQ._mevent(aO)) {
                                    aQ.ll_dispatchMouseEvent(aO, aN, aJ, aI, aH)
                                }
                            }
                            return true
                        } else {
                            aQ.ll_mouseout(aN, aO, aJ, aI, aH)
                        }
                    return false
                },
                hitTestPoint: function (aH, aK) {
                    var aJ = this,
                        aI = aJ.shapes;
                    if (!aI || aI.length == 0) {
                            aJ.getWidth();
                            aJ.getHeight();
                            aI = [{
                                type: n.RECT,
                                arg: [aJ.ll_left - aJ.x, aJ.ll_top - aJ.y, aJ.ll_right - aJ.ll_left, aJ.ll_bottom - aJ.ll_top]
                            }]
                        }
                    return aJ.ismouseonShapes(aI, aH, aK)
                },
                hitTestObject: function (aM) {
                    var aS = this,
                        aH = aS.shapes,
                        aK = aM.shapes,
                        aJ, aQ, aL, aI, aR, aN, aP, aO;
                    if (!aH || aH.length == 0) {
                            aS.getWidth();
                            aS.getHeight();
                            aH = [{
                                type: n.RECT,
                                arg: [aS.ll_left - aS.x, aS.ll_top - aS.y, aS.ll_right - aS.ll_left, aS.ll_bottom - aS.ll_top]
                            }]
                        }
                    if (!aK || aK.length == 0) {
                            aM.getWidth();
                            aM.getHeight();
                            aK = [{
                                type: n.RECT,
                                arg: [aM.ll_left - aM.x, aM.ll_top - aM.y, aM.ll_right - aM.ll_left, aM.ll_bottom - aM.ll_top]
                            }]
                        }
                    aJ = aS.getRootMatrix();
                    aQ = aM.getRootMatrix();
                    for (aL = aH.length - 1; aL >= 0; aL--) {
                            aI = aH[aL];
                            aO = aS._changeShape(aI.type, aI.arg, aJ);
                            for (aR = aK.length - 1; aR >= 0; aR--) {
                                aN = aK[aR];
                                aP = aM._changeShape(aN.type, aN.arg, aQ);
                                if (aI.type == n.VERTICES || aI.type == n.RECT) {
                                    if (aN.type == n.VERTICES || aN.type == n.RECT) {
                                        if (ae.hitTestPolygon(aO, aP)) {
                                            return true
                                        }
                                    } else {
                                        if (aN.type == n.ARC) {
                                            if (ae.hitTestPolygonArc(aO, aP)) {
                                                return true
                                            }
                                        }
                                    }
                                } else {
                                    if (aN.type == n.VERTICES || aN.type == n.RECT) {
                                        if (ae.hitTestPolygonArc(aP, aO)) {
                                            return true
                                        }
                                    } else {
                                        if (aN.type == n.ARC) {
                                            if (Math.sqrt((aO[0] - aP[0]) * (aO[0] - aP[0]) + (aO[1] - aP[1]) * (aO[1] - aP[1])) < aO[2] + aP[2]) {
                                                return true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    return false
                },
                addShape: function (aJ, aH) {
                    var aI = this;
                    if (aJ == n.VERTICES && aH.length < 3) {
                        return
                    }
                    aI.shapes.push({
                        type: aJ,
                        arg: aH
                    });
                    return aI.shapes
                },
                addShapes: function (aH) {
                    var aI = this;
                    if (aI.shapes.length == 0) {
                        aI.shapes = aH
                    } else {
                        aI.shapes = aI.shapes.concat(aH)
                    }
                },
                clearShape: function () {
                    this.shapes = []
                },
                _ll_debugShape: function () {
                    var aL = this,
                        aK, aI, aO, aN, aH, aJ, aM;
                    if (!ae.traceDebug || aL.shapes.length == 0) {
                            return
                        }
                    for (aK = 0, aI = aL.shapes.length; aK < aI; aK++) {
                            aO = aL.shapes[aK];
                            aN = ae.canvas;
                            aH = aO.arg;
                            aN.beginPath();
                            if (aO.type == n.RECT) {
                                aN.rect(aH[0], aH[1], aH[2], aH[3])
                            } else {
                                if (aO.type == n.ARC) {
                                    aN.arc(aH[0], aH[1], aH[2], 0, 2 * Math.PI)
                                } else {
                                    if (aO.type == n.VERTICES) {
                                        aN.moveTo(aH[0][0], aH[0][1]);
                                        for (aJ = 1, aM = aH.length; aJ < aM; aJ++) {
                                            aN.lineTo(aH[aJ][0], aH[aJ][1])
                                        }
                                        aN.lineTo(aH[0][0], aH[0][1])
                                    }
                                }
                            }
                            aN.closePath();
                            aN.strokeStyle = "#00FF00";
                            aN.stroke()
                        }
                },
                ismouseon: function (aL, aN) {
                    var aK = this;
                    if (!aK.visible || aL == null) {
                        return false
                    }
                    if (aK.mask) {
                        if (!aK.mask.parent) {
                            aK.mask.parent = aK.parent
                        }
                        if (!aK.mask.ismouseon(aL, aN)) {
                            return false
                        }
                    }
                    if (aK.shapes && aK.shapes.length > 0) {
                        return aK.ismouseonShapes(aK.shapes, aL.offsetX, aL.offsetY)
                    }
                    var aI, aJ = false,
                        aH = aK.childList,
                        aM = {
                            x: aK.x * aN.scaleX + aN.x,
                            y: aK.y * aN.scaleY + aN.y,
                            scaleX: aN.scaleX * aK.scaleX,
                            scaleY: aN.scaleY * aK.scaleY
                        };
                    for (aI = aH.length - 1; aI >= 0; aI--) {
                            if (aH[aI].ismouseon) {
                                aJ = aH[aI].ismouseon(aL, aM)
                            }
                            if (aJ) {
                                aL.target = aK.childList[aI];
                                break
                            }
                        }
                    if (!aJ) {
                            aJ = aK.graphics.ismouseon(aL, aM)
                        }
                    return aJ
                },
                die: function () {
                    var aJ = this,
                        aI, aK, aH;
                    aJ.graphics.clear();
                    aJ.removeAllEventListener();
                    aJ.stopDrag();
                    if (aJ.box2dBody) {
                            aJ.clearBody()
                        }
                    for (aI = 0, aK = aJ.childList, aH = aK.length; aI < aH; aI++) {
                            if (aK[aI].die) {
                                aK[aI].die()
                            }
                        }
                }
            };
            for (var aE in aF) {
                aG.prototype[aE] = aF[aE]
            }
            return aG
        })();
    var q = (function () {
            function aE(aM, aH, aL, aI, aK) {
                var aJ = this;
                E(aJ, Q, []);
                aJ.type = "LBitmap";
                aJ.rotateCenter = true;
                if (aM.type && aM.type === "LBitmapData") {
                    aJ.bitmapData = aM
                } else {
                    aJ.bitmapData = new s(aM)
                }
                aJ.width = aI || aJ.bitmapData.width;
                aJ.height = aK || aJ.bitmapData.height;
                aJ.x = aH || 0;
                aJ.y = aL || 0;
                aJ.rotatex = aJ.getWidth() * 0.5;
                aJ.rotatey = aJ.getHeight() * 0.5
            }
            var aG = {
                _canShow: function () {
                    return (this.visible && this.bitmapData)
                },
                _rotateReady: function () {
                    var aH = this;
                    if (aH.rotate != 0 && aH.rotateCenter) {
                        aH.rotatex = aH.getWidth() * 0.5;
                        aH.rotatey = aH.getHeight() * 0.5
                    } else {
                        if (typeof aH.rotatex == Y) {
                            aH.rotatex = aH.rotatey = 0
                        }
                    }
                },
                _coordinate: function (aH) {},
                _ll_show: function () {
                    this.ll_draw()
                },
                ll_draw: function () {
                    var aH = this;
                    if (ae.fpsStatus) {
                        ae.fpsStatus.bitmapData++
                    }
                    ae.canvas.drawImage(aH.bitmapData.image, aH.bitmapData.x, aH.bitmapData.y, aH.bitmapData.width, aH.bitmapData.height, aH.x, aH.y, aH.width, aH.height)
                },
                clone: function () {
                    var aI = this,
                        aH = new aE(aI.bitmapData.clone(), aI.x, aI.y, aI.width, aI.height);
                    aH.copyProperty(aI);
                    aH.rotateCenter = aI.rotateCenter;
                    return aH
                },
                ismouseon: function (aJ, aI) {
                    var aH = this;
                    if (!aJ) {
                        return false
                    }
                    if (!aH.visible || !aH.bitmapData) {
                        return false
                    }
                    if (aH.mask) {
                        if (!aH.mask.parent) {
                            aH.mask.parent = aH.parent
                        }
                        if (!aH.mask.ismouseon(aJ, aI)) {
                            return false
                        }
                    }
                    return aH.ismouseonShapes([{
                        type: n.RECT,
                        arg: [0, 0, aH.width, aH.height]
                    }], aJ.offsetX, aJ.offsetY)
                },
                getWidth: function (aJ) {
                    var aI = this,
                        aH, aK, aL;
                    aH = aI.width || (aI.bitmapData != null ? aI.bitmapData.width * (aI.scaleX > 0 ? aI.scaleX : -aI.scaleX) : 0);
                    if (aJ && aI.mask) {
                            aK = aI.mask._startX ? aI.mask._startX() : aI.mask.startX();
                            if (aK > aH) {
                                return 0
                            }
                            aL = aI.mask.getWidth();
                            if (aK + aL > aH) {
                                return aH - aK
                            } else {
                                return aL
                            }
                        }
                    aI.ll_left = aI.x;
                    aI.ll_right = aI.x + aH;
                    return aH
                },
                getHeight: function (aK) {
                    var aJ = this,
                        aI, aL, aH;
                    aI = aJ.height || (aJ.bitmapData != null ? aJ.bitmapData.height * (aJ.scaleY > 0 ? aJ.scaleY : -aJ.scaleY) : 0);
                    if (aK && aJ.mask) {
                            aL = aJ.mask._startY ? aJ.mask._startY() : aJ.mask.startY();
                            if (aL > aI) {
                                return 0
                            }
                            aH = aJ.mask.getHeight();
                            if (aL + aH > aI) {
                                return aI - aL
                            } else {
                                return aH
                            }
                        }
                    aJ.ll_top = aJ.y;
                    aJ.ll_bottom = aJ.y + aI;
                    return aI
                },
                startX: function () {
                    return this.x
                },
                startY: function () {
                    return this.y
                },
                die: function () {}
            };
            for (var aF in aG) {
                aE.prototype[aF] = aG[aF]
            }
            return aE
        })();
    var s = (function () {
            function aF(aI, aN, aL, aH, aO, aM) {
                var aP = this;
                E(aP, r, []);
                aP.type = "LBitmapData";
                if (typeof aM == Y) {
                    aM = aF.DATA_IMAGE
                }
                aP.oncomplete = null;
                aP._locked = false;
                aP._setPixel = false;
                aP.x = (aN == null ? 0 : aN);
                aP.y = (aL == null ? 0 : aL);
                aP.width = 0;
                aP.height = 0;
                aP.dataType = null;
                if (aI && typeof aI == "object") {
                    aP.image = aI;
                    aP.dataType = aF.DATA_IMAGE;
                    aP.width = (aH == null ? aP.image.width : aH);
                    aP.height = (aO == null ? aP.image.height : aO);
                    aP._setDataType(aM)
                } else {
                    aP._createCanvas();
                    aP.dataType = aF.DATA_CANVAS;
                    aP._canvas.width = aP.width = (aH == null ? 1 : aH);
                    aP._canvas.height = aP.height = (aO == null ? 1 : aO);
                    if (typeof aI == "string") {
                        aI = parseInt(aI.replace("#", "0x"))
                    }
                    if (typeof aI == "number") {
                        var aK = aP._context.createImageData(aP.width, aP.height);
                        for (var aJ = 0; aJ < aK.data.length; aJ += 4) {
                            aK.data[aJ + 0] = aI >> 16 & 255;
                            aK.data[aJ + 1] = aI >> 8 & 255;
                            aK.data[aJ + 2] = aI & 255;
                            aK.data[aJ + 3] = 255
                        }
                        aP._context.putImageData(aK, 0, 0)
                    }
                    aP.image = aP._canvas;
                    if (aM == aF.DATA_IMAGE) {
                        aP._setDataType(aM)
                    }
                }
                aP.resize()
            }
            aF.DATA_IMAGE = "data_image";
            aF.DATA_CANVAS = "data_canvas";
            var aG = {
                _setDataType: function (aH) {
                    var aI = this;
                    if (aI.dataType == aH) {
                        return
                    }
                    if (aH == aF.DATA_CANVAS) {
                        aI._createCanvas();
                        aI._canvas.width = aI.image.width;
                        aI._canvas.height = aI.image.height;
                        aI._context.clearRect(0, 0, aI._canvas.width, aI._canvas.height);
                        aI._context.drawImage(aI.image, 0, 0);
                        aI.image = aI._canvas
                    } else {
                        if (aH == aF.DATA_IMAGE) {
                            aI.image = new Image();
                            aI.image.width = aI._canvas.width;
                            aI.image.height = aI._canvas.height;
                            aI.image.src = aI._canvas.toDataURL()
                        }
                    }
                    aI.dataType = aH
                },
                _createCanvas: function () {
                    var aH = this;
                    if (!aH._canvas) {
                        aH._canvas = document.createElement("canvas");
                        aH._context = aH._canvas.getContext("2d")
                    }
                },
                clear: function () {
                    var aH = this;
                    aH._createCanvas();
                    aH._canvas.width = aH.image.width;
                    if (aH.dataType == aF.DATA_IMAGE) {
                        aH.image.src = aH._canvas.toDataURL()
                    }
                },
                setProperties: function (aI, aL, aK, aH) {
                    var aJ = this;
                    aJ.x = aI;
                    aJ.y = aL;
                    aJ.width = aK;
                    aJ.height = aH;
                    aJ.resize()
                },
                setCoordinate: function (aH, aJ) {
                    var aI = this;
                    aI.x = aH;
                    aI.y = aJ;
                    aI.resize()
                },
                clone: function () {
                    var aH = this;
                    return new aF(aH.image, aH.x, aH.y, aH.width, aH.height, aH.dataType)
                },
                _ready: function () {
                    var aH = this;
                    aH._dataType = aH.dataType;
                    aH._setDataType(aF.DATA_CANVAS);
                    aH._data = aH._context.getImageData(aH.x, aH.y, aH.width, aH.height)
                },
                _update: function () {
                    var aH = this;
                    aH._context.putImageData(aH._data, aH.x, aH.y, 0, 0, aH.width, aH.height);
                    aH._setDataType(aH._dataType);
                    aH._data = null
                },
                applyFilter: function (aN, aK, aH, aJ) {
                    var aI = this;
                    var aL = aI._context.getImageData(aI.x + aK.x, aI.y + aK.y, aK.width, aK.height);
                    var aM = aJ.filter(aL, aK.width);
                    aI.putPixels(new O(aH.x, aH.y, aK.width, aK.height), aM)
                },
                getPixel: function (aH, aM, aI) {
                    var aK = this,
                        aJ, aL;
                    aH = aH >> 0;
                    aM = aM >> 0;
                    if (!aK._locked) {
                            aK._ready()
                        }
                    aJ = aK.width * 4 * aM + aH * 4;
                    aL = aK._data.data;
                    if (!aK._locked) {
                            aK._update()
                        }
                    if (aI == "number") {
                            return aL[aJ] << 16 | aL[aJ + 1] << 8 | aL[aJ + 2]
                        } else {
                            return [aL[aJ], aL[aJ + 1], aL[aJ + 2], aL[aJ + 3]]
                        }
                },
                setPixel: function (aH, aM, aK) {
                    var aJ = this;
                    aH = aH >> 0;
                    aM = aM >> 0;
                    if (!aJ._locked) {
                        aJ._ready()
                    }
                    var aL = aJ._data,
                        aI = aJ.width * 4 * aM + aH * 4;
                    if (typeof aK == "object") {
                            aL.data[aI + 0] = aK[0];
                            aL.data[aI + 1] = aK[1];
                            aL.data[aI + 2] = aK[2];
                            aL.data[aI + 3] = aK[3]
                        } else {
                            if (typeof aK == "string") {
                                aK = parseInt(aK.replace("#", "0x"))
                            }
                            aL.data[aI + 0] = aK >> 16 & 255;
                            aL.data[aI + 1] = aK >> 8 & 255;
                            aL.data[aI + 2] = aK & 255;
                            aL.data[aI + 3] = 255
                        }
                    if (!aJ._locked) {
                            aJ._update()
                        }
                },
                getPixels: function (aJ) {
                    var aH = this,
                        aI;
                    if (!aH._locked) {
                            aH._ready()
                        }
                    aI = aH._context.getImageData(aH.x + aJ.x, aH.y + aJ.y, aJ.width, aJ.height);
                    if (!aH._locked) {
                            aH._update()
                        }
                    return aI
                },
                setPixels: function (aN, aI) {
                    var aQ = this,
                        aJ, aH, aK, aP, aL, aO, aM;
                    if (!aQ._locked) {
                            aQ._ready()
                        }
                    aK = aQ._data;
                    if (typeof aI == "object") {
                            aP = aQ._canvas.width;
                            for (aO = aN.x; aO < aN.right; aO++) {
                                for (aM = aN.y; aM < aN.bottom; aM++) {
                                    aJ = aP * 4 * (aQ.y + aM) + (aQ.x + aO) * 4;
                                    aH = aI.width * 4 * (aM - aN.y) + (aO - aN.x) * 4;
                                    aK.data[aJ + 0] = aI.data[aH + 0];
                                    aK.data[aJ + 1] = aI.data[aH + 1];
                                    aK.data[aJ + 2] = aI.data[aH + 2];
                                    aK.data[aJ + 3] = aI.data[aH + 3]
                                }
                            }
                        } else {
                            if (typeof aI == "string") {
                                aI = parseInt(aI.replace("#", "0x"))
                            }
                            aI = [aI >> 16 & 255, aI >> 8 & 255, aI & 255];
                            aP = aQ._canvas.width;
                            for (aO = aN.x; aO < aN.right; aO++) {
                                for (aM = aN.y; aM < aN.bottom; aM++) {
                                    aJ = aP * 4 * (aQ.y + aM) + (aQ.x + aO) * 4;
                                    aK.data[aJ + 0] = aI[0];
                                    aK.data[aJ + 1] = aI[1];
                                    aK.data[aJ + 2] = aI[2];
                                    aK.data[aJ + 3] = 255
                                }
                            }
                        }
                    if (!aQ._locked) {
                            aQ._update()
                        }
                },
                putPixels: function (aI, aJ) {
                    var aH = this;
                    if (aH.dataType != aF.DATA_CANVAS || typeof aJ != "object") {
                        return
                    }
                    aH._context.putImageData(aJ, aH.x + aI.x, aH.y + aI.y, 0, 0, aI.width, aI.height)
                },
                lock: function () {
                    var aH = this;
                    aH._locked = true;
                    aH._ready()
                },
                unlock: function () {
                    var aH = this;
                    aH._locked = false;
                    aH._update()
                },
                draw: function (aH, aR, aI, aP, aJ) {
                    var aU = this,
                        aN, aL = aH,
                        aQ, aO, aS, aK, aM = false;
                    var aT = aU.dataType;
                    aU._setDataType(aF.DATA_CANVAS);
                    if (aR || aI || aP || aJ) {
                            aU._context.save();
                            aM = true
                        }
                    if (aJ) {
                            if (!(aL instanceof aF)) {
                                aQ = aO = 0
                            } else {
                                aQ = aL.x;
                                aO = aL.y
                            }
                            aL = new aF(aL.getDataCanvas(), aQ + aJ.x, aO + aJ.y, aJ.width, aJ.height, aF.DATA_CANVAS)
                        }
                    aS = aL.getWidth() >>> 0;
                    aK = aL.getHeight() >>> 0;
                    if (aS == 0 || aK == 0) {
                            aU._setDataType(aT);
                            return
                        }
                    aN = aL.getDataCanvas();
                    if (aI) {
                            aL.colorTransform(new O(0, 0, aS, aK), aI);
                            aN = aL.image
                        }
                    if (aR) {
                            aU._context.setTransform(aR.a, aR.b, aR.c, aR.d, aR.tx, aR.ty)
                        }
                    if (aP) {
                            aU._context.globalCompositeOperation = aP
                        }
                    aU._context.drawImage(aN, aL.x, aL.y, aS, aK, 0, 0, aS, aK);
                    if (aM) {
                            aU._context.restore()
                        }
                    aU._setDataType(aT);
                    aU.resize()
                },
                getDataCanvas: function () {
                    var aI = this;
                    var aH = aI.dataType;
                    aI._setDataType(aF.DATA_CANVAS);
                    aI._setDataType(aH);
                    return aI._canvas
                },
                getWidth: function () {
                    return this.width
                },
                getHeight: function () {
                    return this.height
                },
                resize: function () {
                    var aJ = this,
                        aH = aJ.image.width - aJ.x,
                        aI = aJ.image.height - aJ.y;
                    aJ.width = aJ.width < aH ? aJ.width : aH;
                    aJ.height = aJ.height < aI ? aJ.height : aI
                },
                colorTransform: function (aR, aJ) {
                    var aV = this;
                    if (aV.dataType != aF.DATA_CANVAS) {
                        return
                    }
                    var aT = aR.x >> 0,
                        aQ = aR.y >> 0,
                        aU = aR.width >> 0,
                        aN = aR.height >> 0;
                    var aM = aV._context.getImageData(aV.x + aR.x, aV.y + aR.y, aR.width, aR.height);
                    var aL = aM.data;
                    for (var aK = 0, aI = aL.length; aK < aI; aK += 4) {
                            var aH = aK,
                                aO = aK + 1,
                                aP = aK + 2,
                                aS = aK + 3;
                            aL[aH] = aL[aH] * aJ.redMultiplier + aJ.redOffset;
                            aL[aO] = aL[aO] * aJ.greenMultiplier + aJ.greenOffset;
                            aL[aP] = aL[aP] * aJ.blueMultiplier + aJ.blueOffset;
                            aL[aS] = aL[aS] * aJ.alphaMultiplier + aJ.alphaOffset
                        }
                    aV._context.putImageData(aM, aV.x + aR.x, aV.y + aR.y, 0, 0, aR.width, aR.height)
                },
                copyPixels: function (aJ, aN, aL) {
                    var aP = this,
                        aI, aM, aH, aO, aK = aJ;
                    if (aP.dataType != aF.DATA_CANVAS) {
                            return
                        }
                    aI = aK.x;
                    aM = aK.y;
                    aH = aK.width;
                    aO = aK.height;
                    aK.setProperties(aN.x + aK.x, aN.y + aK.y, aN.width, aN.height);
                    aP._context.drawImage(aK.image, aK.x, aK.y, aK.width, aK.height, aL.x, aL.y, aK.width, aK.height);
                    aK.x = aI;
                    aK.y = aM;
                    aK.width = aH;
                    aK.height = aO
                }
            };
            for (var aE in aG) {
                aF.prototype[aE] = aG[aE]
            }
            return aF
        })();
    var aj = (function () {
            function aE() {
                var aF = this;
                E(aF, r, []);
                aF.type = "LBitmapFilter"
            }
            aE.prototype.ll_show = function (aI) {
                var aF = this;
                if (aF.cacheMaking) {
                    return
                }
                var aJ = ae.canvas,
                    aH = aI,
                    aG;
                if (aH.constructor.name == "LBitmap") {
                        aG = aH.bitmapData
                    } else {
                        if (!aH._ll_cacheAsBitmap) {
                            aF.cacheMaking = true;
                            aH.cacheAsBitmap(true);
                            aF.cacheMaking = false
                        }
                        aG = aH._ll_cacheAsBitmap.bitmapData
                    }
                if (aF.bitmapDataIndex === aG.objectIndex) {
                        return
                    }
                aF.bitmapDataIndex = aG.objectIndex;
                aG.applyFilter(aG, new O(0, 0, aG.width, aG.height), new ax(0, 0), aF)
            };
            return aE
        })();
    var ai = (function () {
            function aG(aL, aK, aH, aJ) {
                var aI = this;
                E(aI, aj, []);
                aI.type = "LDropShadowFilter";
                aI.distance = aL ? aL : 0;
                aI.angle = aK ? aK : 0;
                aI.shadowColor = aH ? aH : "#000000";
                aI.shadowBlur = aJ ? aJ : 20;
                aI.setShadowOffset()
            }
            var aF = {
                setShadowOffset: function () {
                    var aI = this;
                    var aH = aI.angle * Math.PI / 180;
                    aI.shadowOffsetX = aI.distance * Math.cos(aH);
                    aI.shadowOffsetY = aI.distance * Math.sin(aH)
                },
                ll_show: function () {
                    var aH = this,
                        aI = ae.canvas;
                    aI.shadowColor = aH.shadowColor;
                    aI.shadowBlur = aH.shadowBlur;
                    aI.shadowOffsetX = aH.shadowOffsetX;
                    aI.shadowOffsetY = aH.shadowOffsetY
                },
                setDistance: function (aH) {
                    this.distance = aH;
                    this.setShadowOffset()
                },
                setAngle: function (aH) {
                    this.angle = aH;
                    this.setShadowOffset()
                },
                setColor: function (aH) {
                    this.shadowColor = aH
                },
                setBlur: function (aH) {
                    this.shadowBlur = aH
                }
            };
            for (var aE in aF) {
                aG.prototype[aE] = aF[aE]
            }
            return aG
        })();
    var ak = (function () {
            function aG(aH) {
                var aI = this;
                E(aI, aj, []);
                aI.type = "LColorMatrixFilter";
                aI.matrix = aH
            }
            var aF = {
                filter: function (aH, aP) {
                    var aQ = this,
                        aL = ae.canvas;
                    var aM = aH.data;
                    var aK = aL.createImageData(aH);
                    var aO = aK.data;
                    var aJ = aO.length;
                    var aN = aQ.matrix;
                    for (var aI = 0; aI < aJ; aI += 4) {
                            aO[aI] = (aN[0] * aM[aI]) + (aN[1] * aM[aI + 1]) + (aN[2] * aM[aI + 2]) + (aN[3] * aM[aI + 3]) + aN[4];
                            aO[aI + 1] = (aN[5] * aM[aI]) + (aN[6] * aM[aI + 1]) + (aN[7] * aM[aI + 2]) + (aN[8] * aM[aI + 3]) + aN[9];
                            aO[aI + 2] = (aN[10] * aM[aI]) + (aN[11] * aM[aI + 1]) + (aN[12] * aM[aI + 2]) + (aN[13] * aM[aI + 3]) + aN[14];
                            aO[aI + 3] = (aN[15] * aM[aI]) + (aN[16] * aM[aI + 1]) + (aN[17] * aM[aI + 2]) + (aN[18] * aM[aI + 3]) + aN[19]
                        }
                    return aK
                }
            };
            for (var aE in aF) {
                aG.prototype[aE] = aF[aE]
            }
            return aG
        })();
    var b = (function () {
            function aF(aL, aI, aP, aH, aN, aO, aM, aK, aJ) {
                var aQ = this;
                E(aQ, aj, []);
                aQ.type = "LConvolutionFilter";
                aQ.matrixX = aL ? aL : 0;
                aQ.matrixY = aI ? aI : 0;
                aQ.matrix = aP;
                if (!aH) {
                    aH = aP.reduce(function (aS, aR) {
                        return aS + aR
                    }) || 1
                }
                aQ.divisor = aH;
                aQ.bias = aN ? aN : 0
            }
            var aG = {
                filter: function (aH, aQ) {
                    var aR = this,
                        aN = ae.canvas;
                    var aO = aH.data;
                    var aM = aN.createImageData(aH);
                    var aP = aM.data;
                    var aL = aP.length;
                    for (var aK = 0; aK < aL; aK++) {
                            if ((aK + 1) % 4 === 0) {
                                aP[aK] = aO[aK];
                                continue
                            }
                            res = 0;
                            var aI = [aO[aK - aQ * 4 - 4] || aO[aK], aO[aK - aQ * 4] || aO[aK], aO[aK - aQ * 4 + 4] || aO[aK], aO[aK - 4] || aO[aK], aO[aK], aO[aK + 4] || aO[aK], aO[aK + aQ * 4 - 4] || aO[aK], aO[aK + aQ * 4] || aO[aK], aO[aK + aQ * 4 + 4] || aO[aK]];
                            for (var aJ = 0; aJ < 9; aJ++) {
                                res += aI[aJ] * aR.matrix[aJ]
                            }
                            res /= aR.divisor;
                            if (aR.bias) {
                                res += aR.bias
                            }
                            aP[aK] = res
                        }
                    return aM
                }
            };
            for (var aE in aG) {
                aF.prototype[aE] = aG[aE]
            }
            return aF
        })();
    var k = (function () {
            function aF(aI, aM, aH, aK, aO, aN, aP, aJ, aL) {
                var aQ = this;
                E(aQ, X, []);
                aQ.type = "LAnimation";
                aQ.index = 0;
                aQ.frameInc = 0;
                aQ.loop = aK || "loop";
                aQ.count = aL || 0;
                aQ.fps = aH || 60 / 1000;
                if (Array.isArray(aI)) {
                    aQ.bitmapList = aI
                } else {
                    aQ.bitmapList = [aI]
                }
                aQ.bitmap = new q(aQ.bitmapList[0], aO, aN, aP, aJ);
                aQ.imageArray = aM;
                aQ.addChild(aQ.bitmap);
                aQ.index = 0;
                aQ.addEventListener(y.ENTER_FRAME, aQ.onframe.bind(aQ))
            }
            var aG = {
                change: function (aI, aM, aH, aK, aO, aN, aP, aJ, aL) {
                    var aQ = this;
                    if (aI) {
                        if (Array.isArray(aI)) {
                            aQ.bitmapList = aI
                        } else {
                            aQ.bitmapList = [aI]
                        }
                        aQ.bitmap.bitmapData = aQ.bitmapList[0]
                    }
                    aO && (aQ.bitmap.x = aO);
                    aN && (aQ.bitmap.y = aN);
                    aP && (aQ.bitmap.width = aP);
                    aJ && (aQ.bitmap.height = aJ);
                    aM && (aQ.imageArray = aM);
                    aH && (aQ.fps = aH);
                    aK && (aQ.loop = aK);
                    aQ.index = 0;
                    aQ.frameInc = 0;
                    aQ.count = aL || 0
                },
                onframe: function () {
                    var aJ = this,
                        aH, aM = 0,
                        aK = aJ.imageArray || aJ.bitmapList;
                    if (aJ._ll_stop) {
                            return
                        }
                    if (aJ.loop === "none") {
                            return
                        }
                    if (aJ.bitmapList.length === 1 && (!aK || !Array.isArray(aK) || aK.length <= 1)) {
                            return
                        }
                    if (aJ.index >= aK.length) {
                            aJ.index = 0
                        }
                    aJ.frameInc += aJ.fps * ae.delta;
                    var aI = Math.floor(aJ.frameInc);
                    var aL = aJ.index;
                    aJ.index = aI % aK.length;
                    if (aJ.bitmapList.length > 1 && aJ.index < aJ.bitmapList.length) {
                            aJ.bitmap.bitmapData = aJ.bitmapList[aJ.index]
                        }
                    if (aJ.imageArray && Array.isArray(aJ.imageArray)) {
                            aH = aK[aJ.index];
                            if (typeof aH.dataIndex == "number" && Array.isArray(aJ.bitmapList) && aH.dataIndex < aJ.bitmapList.length) {
                                aJ.bitmap.bitmapData = aJ.bitmapList[aH.dataIndex]
                            }
                            if (typeof aH.width != Y && typeof aH.height != Y) {
                                aJ.bitmap.bitmapData.setProperties(aH.x, aH.y, aH.width, aH.height)
                            } else {
                                aJ.bitmap.bitmapData.setCoordinate(aH.x, aH.y)
                            }
                            if (typeof aH.sx != Y) {
                                aM = aH.sx
                            }
                            if (typeof aH.sy != Y) {
                                aJ.bitmap.y = aH.sy
                            }
                            if (typeof aH.mirror != Y) {
                                aJ.bitmap.rotateCenter = false;
                                aJ.bitmap.scaleX = aH.mirror ? -1 : 1
                            }
                            aJ.bitmap.x = aM + (aJ.bitmap.scaleX == 1 ? 0 : aJ.bitmap.getWidth())
                        }
                    if (aL !== aJ.index && aJ.index === aK.length - 1) {
                            aJ.dispatchEvent(y.COMPLETE);
                            if (typeof aJ.count == "number") {
                                aJ.count++
                            }
                            if (typeof aJ.loop === "number") {
                                aJ.loop--;
                                if (aJ.loop <= 0) {
                                    aJ.remove();
                                    aJ.die()
                                }
                            }
                        }
                },
                play: function () {
                    this._ll_stop = false
                },
                stop: function () {
                    this._ll_stop = true
                },
                clone: function () {
                    var aI = this,
                        aH = new aI.constructor(null, aI.bitmapList, aI.imageArray.slice(0));
                    aH.copyProperty(aI);
                    aH.childList.length = 0;
                    aH.bitmap = aI.bitmap.clone();
                    aH.addChild(aH.bitmap);
                    return aH
                }
            };
            for (var aE in aG) {
                aF.prototype[aE] = aG[aE]
            }
            return aF
        })();
    var t = {
            None: {
                easeIn: function (aF, aE, aH, aG) {
                    return aE + aF * aH / aG
                },
                easeOut: function (aF, aE, aH, aG) {
                    return aE + aF * aH / aG
                },
                easeInOut: function (aF, aE, aH, aG) {
                    return aE + aF * aH / aG
                }
            },
            Quad: {
                easeIn: function (aF, aE, aH, aG) {
                    return aH * (aF /= aG) * aF + aE
                },
                easeOut: function (aF, aE, aH, aG) {
                    return -aH * (aF /= aG) * (aF - 2) + aE
                },
                easeInOut: function (aF, aE, aH, aG) {
                    if ((aF /= aG / 2) < 1) {
                        return aH / 2 * aF * aF + aE
                    }
                    return -aH / 2 * ((--aF) * (aF - 2) - 1) + aE
                }
            },
            Cubic: {
                easeIn: function (aF, aE, aH, aG) {
                    return aH * (aF /= aG) * aF * aF + aE
                },
                easeOut: function (aF, aE, aH, aG) {
                    return aH * ((aF = aF / aG - 1) * aF * aF + 1) + aE
                },
                easeInOut: function (aF, aE, aH, aG) {
                    if ((aF /= aG / 2) < 1) {
                        return aH / 2 * aF * aF * aF + aE
                    }
                    return aH / 2 * ((aF -= 2) * aF * aF + 2) + aE
                }
            },
            Quart: {
                easeIn: function (aF, aE, aH, aG) {
                    return aH * (aF /= aG) * aF * aF * aF + aE
                },
                easeOut: function (aF, aE, aH, aG) {
                    return -aH * ((aF = aF / aG - 1) * aF * aF * aF - 1) + aE
                },
                easeInOut: function (aF, aE, aH, aG) {
                    if ((aF /= aG / 2) < 1) {
                        return aH / 2 * aF * aF * aF * aF + aE
                    }
                    return -aH / 2 * ((aF -= 2) * aF * aF * aF - 2) + aE
                }
            },
            Quint: {
                easeIn: function (aF, aE, aH, aG) {
                    return aH * (aF /= aG) * aF * aF * aF * aF + aE
                },
                easeOut: function (aF, aE, aH, aG) {
                    return aH * ((aF = aF / aG - 1) * aF * aF * aF * aF + 1) + aE
                },
                easeInOut: function (aF, aE, aH, aG) {
                    if ((aF /= aG / 2) < 1) {
                        return aH / 2 * aF * aF * aF * aF * aF + aE
                    }
                    return aH / 2 * ((aF -= 2) * aF * aF * aF * aF + 2) + aE
                }
            },
            Sine: {
                easeIn: function (aF, aE, aH, aG) {
                    return -aH * Math.cos(aF / aG * (Math.PI / 2)) + aH + aE
                },
                easeOut: function (aF, aE, aH, aG) {
                    return aH * Math.sin(aF / aG * (Math.PI / 2)) + aE
                },
                easeInOut: function (aF, aE, aH, aG) {
                    return -aH / 2 * (Math.cos(Math.PI * aF / aG) - 1) + aE
                }
            },
            Strong: {
                easeIn: function (aF, aE, aH, aG) {
                    return aH * (aF /= aG) * aF * aF * aF * aF + aE
                },
                easeOut: function (aF, aE, aH, aG) {
                    return aH * ((aF = aF / aG - 1) * aF * aF * aF * aF + 1) + aE
                },
                easeInOut: function (aF, aE, aH, aG) {
                    if ((aF /= aG / 2) < 1) {
                        return aH / 2 * aF * aF * aF * aF * aF + aE
                    }
                    return aH / 2 * ((aF -= 2) * aF * aF * aF * aF + 2) + aE
                }
            },
            Expo: {
                easeIn: function (aF, aE, aH, aG) {
                    return (aF == 0) ? aE : aH * Math.pow(2, 10 * (aF / aG - 1)) + aE
                },
                easeOut: function (aF, aE, aH, aG) {
                    return (aF == aG) ? aE + aH : aH * (-Math.pow(2, -10 * aF / aG) + 1) + aE
                },
                easeInOut: function (aF, aE, aH, aG) {
                    if (aF == 0) {
                        return aE
                    }
                    if (aF == aG) {
                        return aE + aH
                    }
                    if ((aF /= aG / 2) < 1) {
                        return aH / 2 * Math.pow(2, 10 * (aF - 1)) + aE
                    }
                    return aH / 2 * (-Math.pow(2, -10 * --aF) + 2) + aE
                }
            },
            Circ: {
                easeIn: function (aF, aE, aH, aG) {
                    return -aH * (Math.sqrt(1 - (aF /= aG) * aF) - 1) + aE
                },
                easeOut: function (aF, aE, aH, aG) {
                    return aH * Math.sqrt(1 - (aF = aF / aG - 1) * aF) + aE
                },
                easeInOut: function (aF, aE, aH, aG) {
                    if ((aF /= aG / 2) < 1) {
                        return -aH / 2 * (Math.sqrt(1 - aF * aF) - 1) + aE
                    }
                    return aH / 2 * (Math.sqrt(1 - (aF -= 2) * aF) + 1) + aE
                }
            },
            Elastic: {
                easeIn: function (aG, aE, aK, aJ, aF, aI) {
                    var aH;
                    if (aG == 0) {
                        return aE
                    }
                    if ((aG /= aJ) == 1) {
                        return aE + aK
                    }
                    if (!aI) {
                        aI = aJ * 0.3
                    }
                    if (!aF || aF < Math.abs(aK)) {
                        aF = aK;
                        aH = aI / 4
                    } else {
                        aH = aI / (2 * Math.PI) * Math.asin(aK / aF)
                    }
                    return -(aF * Math.pow(2, 10 * (aG -= 1)) * Math.sin((aG * aJ - aH) * (2 * Math.PI) / aI)) + aE
                },
                easeOut: function (aG, aE, aK, aJ, aF, aI) {
                    var aH;
                    if (aG == 0) {
                        return aE
                    }
                    if ((aG /= aJ) == 1) {
                        return aE + aK
                    }
                    if (!aI) {
                        aI = aJ * 0.3
                    }
                    if (!aF || aF < Math.abs(aK)) {
                        aF = aK;
                        aH = aI / 4
                    } else {
                        aH = aI / (2 * Math.PI) * Math.asin(aK / aF)
                    }
                    return (aF * Math.pow(2, -10 * aG) * Math.sin((aG * aJ - aH) * (2 * Math.PI) / aI) + aK + aE)
                },
                easeInOut: function (aG, aE, aK, aJ, aF, aI) {
                    var aH;
                    if (aG == 0) {
                        return aE
                    }
                    if ((aG /= aJ / 2) == 2) {
                        return aE + aK
                    }
                    if (!aI) {
                        aI = aJ * (0.3 * 1.5)
                    }
                    if (!aF || aF < Math.abs(aK)) {
                        aF = aK;
                        aH = aI / 4
                    } else {
                        aH = aI / (2 * Math.PI) * Math.asin(aK / aF)
                    }
                    if (aG < 1) {
                        return -0.5 * (aF * Math.pow(2, 10 * (aG -= 1)) * Math.sin((aG * aJ - aH) * (2 * Math.PI) / aI)) + aE
                    }
                    return aF * Math.pow(2, -10 * (aG -= 1)) * Math.sin((aG * aJ - aH) * (2 * Math.PI) / aI) * 0.5 + aK + aE
                }
            },
            Back: {
                easeIn: function (aF, aE, aI, aH, aG) {
                    if (typeof aG == Y) {
                        aG = 1.70158
                    }
                    return aI * (aF /= aH) * aF * ((aG + 1) * aF - aG) + aE
                },
                easeOut: function (aF, aE, aI, aH, aG) {
                    if (typeof aG == Y) {
                        aG = 1.70158
                    }
                    return aI * ((aF = aF / aH - 1) * aF * ((aG + 1) * aF + aG) + 1) + aE
                },
                easeInOut: function (aF, aE, aI, aH, aG) {
                    if (typeof aG == Y) {
                        aG = 1.70158
                    }
                    if ((aF /= aH / 2) < 1) {
                        return aI / 2 * (aF * aF * (((aG *= (1.525)) + 1) * aF - aG)) + aE
                    }
                    return aI / 2 * ((aF -= 2) * aF * (((aG *= (1.525)) + 1) * aF + aG) + 2) + aE
                }
            },
            Bounce: {
                easeIn: function (aF, aE, aH, aG) {
                    return aH - t.Bounce.easeOut(aG - aF, 0, aH, aG) + aE
                },
                easeOut: function (aF, aE, aH, aG) {
                    if ((aF /= aG) < (1 / 2.75)) {
                        return aH * (7.5625 * aF * aF) + aE
                    } else {
                        if (aF < (2 / 2.75)) {
                            return aH * (7.5625 * (aF -= (1.5 / 2.75)) * aF + 0.75) + aE
                        } else {
                            if (aF < (2.5 / 2.75)) {
                                return aH * (7.5625 * (aF -= (2.25 / 2.75)) * aF + 0.9375) + aE
                            } else {
                                return aH * (7.5625 * (aF -= (2.625 / 2.75)) * aF + 0.984375) + aE
                            }
                        }
                    }
                },
                easeInOut: function (aF, aE, aH, aG) {
                    if (aF < aG / 2) {
                        return t.Bounce.easeIn(aF * 2, 0, aH, aG) * 0.5 + aE
                    }
                    return t.Bounce.easeOut(aF * 2 - aG, 0, aH, aG) * 0.5 + aH * 0.5 + aE
                }
            }
        };
    var ar;
    var D = (function () {
            function aI(aJ, aL, aK) {
                var aM = this;
                E(aM, r, []);
                aM.type = "LTweenLiteChild";
                aM.toNew = [];
                aM.init(aJ, aL, aK)
            }
            var aH = {
                init: function (aK, aP, aO) {
                    var aT = this,
                        aM = null,
                        aR = null;
                    if (typeof aO.tweenTimeline == Y) {
                            aO.tweenTimeline = aF.TYPE_FRAME
                        }
                    aT.target = aK;
                    aT.duration = aP || 0.001;
                    aT.vars = aO;
                    aT.delay = aT.vars.delay || 0;
                    if (aT.vars.tweenTimeline == aF.TYPE_TIMER) {
                            aT.currentTime = (new Date()).getTime() / 1000;
                            aT.initTime = aT.currentTime;
                            aT.startTime = aT.initTime + aT.delay
                        } else {
                            aT.currentTime = 0;
                            aT.duration *= 1000;
                            aT.currentTime -= aT.delay * 1000;
                            aT.initTime = (new Date()).getTime() - aT.currentTime
                        }
                    aT.combinedTimeScale = aT.vars.timeScale || 1;
                    aT.active = aT.duration == 0 && aT.delay == 0;
                    aT.varsto = {};
                    aT.varsfrom = {};
                    aT.varsDiff = {};
                    aT.varsListIndex = {};
                    aT.varsListCurr = {};
                    aT.varsListTo = {};
                    aT.varsListLength = {};
                    aT.stop = false;
                    if (typeof aT.vars.ease === "string") {
                            aR = aT.vars.ease.split(".");
                            if (Array.isArray(aR)) {
                                aT.vars.ease = t[aR[0]][aR[1]]
                            }
                        }
                    if (typeof aT.vars.ease !== "function") {
                            aT.vars.ease = t.None.easeIn
                        }
                    aT.ease = aT.vars.ease;
                    delete aT.vars.ease;
                    if (aT.vars.onComplete) {
                            aT.onComplete = aT.vars.onComplete;
                            delete aT.vars.onComplete
                        } else {
                            aT.onComplete = null
                        }
                    if (aT.vars.onUpdate) {
                            aT.onUpdate = aT.vars.onUpdate;
                            delete aT.vars.onUpdate
                        } else {
                            aT.onUpdate = null
                        }
                    if (aT.vars.onStart) {
                            aT.onStart = aT.vars.onStart;
                            delete aT.vars.onStart
                        } else {
                            aT.onStart = null
                        }
                    for (aM in aT.vars) {
                            if (aM == "coordinate" && Array.isArray(aT.vars[aM])) {
                                var aQ = 0,
                                    aS = {
                                        x: aT.target.x,
                                        y: aT.target.y
                                    };
                                for (var aN = 0, aL = aT.vars[aM].length; aN < aL; aN++) {
                                        var aJ = aT.vars[aM][aN];
                                        aQ += ax.distance(aJ, aS);
                                        aS = aJ
                                    }
                                aT.varsListIndex[aM] = 0;
                                aT.varsListCurr[aM] = 0;
                                aT.varsListTo[aM] = aQ;
                                aT.varsto[aM] = aT.vars[aM];
                                aT.varsfrom[aM] = {
                                        x: aT.target.x,
                                        y: aT.target.y
                                    };
                                continue
                            } else {
                                if (typeof aT.vars[aM] != "number") {
                                    continue
                                }
                            }
                            aT.varsto[aM] = aT.vars[aM];
                            aT.varsfrom[aM] = aT.target[aM];
                            aT.varsDiff[aM] = aT.vars[aM] - aT.target[aM]
                        }
                },
                pause: function () {
                    this.stop = true
                },
                resume: function () {
                    this.stop = false
                },
                tween: function () {
                    var aT = this,
                        aP;
                    var aR = (aT.vars.tweenTimeline == aF.TYPE_TIMER);
                    if (aR) {
                            var aK = (new Date()).getTime() / 1000,
                                aL = aK - aT.startTime;
                            if (aL < 0) {
                                    return
                                }
                        } else {
                            if (aT.stop) {
                                return
                            }
                            if (ae.speed) {
                                aT.currentTime += ae.speed
                            } else {
                                aT.currentTime = ((new Date()).getTime() - aT.initTime)
                            }
                            if (this._end) {
                                aT.currentTime = aT.duration
                            }
                            if (aT.currentTime < 0) {
                                return
                            }
                        }
                    for (aE in aT.varsto) {
                            if (typeof aT.varsListTo[aE] != Y) {
                                var aS = aT.ease(aR ? aL : aT.currentTime, 0, aT.varsListTo[aE], aT.duration);
                                if (aS > aT.varsListTo[aE]) {
                                    aS = aT.varsListTo[aE]
                                }
                                var aO = aT.varsListIndex[aE] > 0 ? aT.vars[aE][aT.varsListIndex[aE] - 1] : aT.varsfrom[aE];
                                var aQ = aT.vars[aE][aT.varsListIndex[aE]];
                                var aN = ax.distance(aO, aQ);
                                while (aT.varsListCurr[aE] + aN < aS) {
                                    aT.varsListCurr[aE] += aN;
                                    aO = aQ;
                                    aT.varsListIndex[aE]++;
                                    aQ = aT.vars[aE][aT.varsListIndex[aE]];
                                    aN = ax.distance(aO, aQ)
                                }
                                aT.target.x = aO.x;
                                aT.target.y = aO.y;
                                if (aN != 0 && aQ.x - aO.x != 0) {
                                    aT.target.x += (aQ.x - aO.x) * (aS - aT.varsListCurr[aE]) / aN
                                }
                                if (aN != 0 && aQ.y - aO.y != 0) {
                                    aT.target.y += (aQ.y - aO.y) * (aS - aT.varsListCurr[aE]) / aN
                                }
                                continue
                            }
                            aT.target[aE] = aT.ease(aR ? aL : aT.currentTime, aT.varsfrom[aE], aT.varsDiff[aE], aT.duration)
                        }
                    if (aT.onStart) {
                            aT._dispatchEvent(aT.onStart);
                            delete aT.onStart
                        }
                    var aM;
                    if (aR) {
                            aM = (aL >= aT.duration)
                        } else {
                            aM = (aT.currentTime >= aT.duration)
                        }
                    if (aM) {
                            for (aP in aT.varsto) {
                                if (typeof aT.varsListTo[aP] != Y) {
                                    var aJ = aT.varsto[aP][aT.vars[aP].length - 1];
                                    aT.target.x = aJ.x;
                                    aT.target.y = aJ.y;
                                    continue
                                }
                                aT.target[aP] = aT.varsto[aP]
                            }
                            if (aT.onComplete) {
                                aT._dispatchEvent(aT.onComplete)
                            }
                            return true
                        } else {
                            if (aT.onUpdate) {
                                aT._dispatchEvent(aT.onUpdate)
                            }
                        }
                    return false
                },
                _dispatchEvent: function (aK) {
                    var aJ = this;
                    aJ.target.target = aJ.target;
                    aJ.target.currentTarget = aJ;
                    aK(aJ.target);
                    delete aJ.target.currentTarget;
                    delete aJ.target.target
                },
                to: function (aJ, aL, aK) {
                    var aM = this;
                    aM.toNew.push({
                        target: aJ,
                        duration: aL,
                        vars: aK
                    });
                    return aM
                },
                end: function (aJ) {
                    this._end = true;
                    this._endCallback = aJ
                },
                keep: function () {
                    var aL = this,
                        aK, aM, aJ;
                    if (aL.toNew.length > 0) {
                            aK = aL.toNew.shift();
                            if (aK.vars.loop) {
                                aL.loop = true
                            }
                            if (aL.loop) {
                                aM = {};
                                for (aJ in aK.vars) {
                                    aM[aJ] = aK.vars[aJ]
                                }
                                aL.to(aK.target, aK.duration, aM)
                            }
                            aL.init(aK.target, aK.duration, aK.vars);
                            return true
                        }
                    return false
                }
            };
            for (var aE in aH) {
                aI.prototype[aE] = aH[aE]
            }
            function aF() {
                var aJ = this;
                E(aJ, r, []);
                aJ.type = "LTweenLite";
                aJ.tweens = []
            }
            aF.TYPE_FRAME = "type_frame";
            aF.TYPE_TIMER = "type_timer";
            aH = {
                count: function () {
                    return this.tweens.length
                },
                ll_show: function () {
                    var aL = this;
                    var aK, aM = aL.tweens.length,
                        aJ;
                    for (aK = 0; aK < aM; aK++) {
                            aJ = aL.tweens[aK];
                            if (aJ && aJ.tween && aJ.tween()) {
                                aL.tweens.splice(aK, 1);
                                aK--;
                                aM = aL.tweens.length;
                                if (aJ._end && aJ._endCallback) {
                                    aJ._dispatchEvent(aJ._endCallback);
                                    aJ = null
                                } else {
                                    if (aJ.keep()) {
                                        aL.add(aJ)
                                    }
                                }
                            }
                        }
                },
                to: function (aJ, aM, aL) {
                    if (!aJ) {
                        return
                    }
                    var aN = this;
                    var aK = new aI({}, 0, {});
                    aN.tweens.push(aK);
                    aK.to(aJ, aM, aL);
                    return aK
                },
                add: function (aJ) {
                    this.tweens.push(aJ)
                },
                remove: function (aL) {
                    var aM = this;
                    if (typeof aL == Y) {
                        return
                    }
                    for (var aK = 0, aJ = aM.tweens.length; aK < aJ; aK++) {
                        if (aL.objectIndex == aM.tweens[aK].objectIndex) {
                            aM.tweens.splice(aK, 1);
                            break
                        }
                    }
                },
                endAll: function (aL) {
                    var aK = this;
                    for (var aJ = 0; aJ < aK.tweens.length; aJ++) {
                        aK.tweens[aJ].end()
                    }
                },
                removeAll: function () {
                    this.tweens.splice(0, this.tweens.length)
                },
                pauseAll: function () {
                    for (var aK = 0, aJ = this.tweens.length; aK < aJ; aK++) {
                        this.tweens[aK].pause()
                    }
                },
                resumeAll: function () {
                    for (var aK = 0, aJ = this.tweens.length; aK < aJ; aK++) {
                        this.tweens[aK].resume()
                    }
                }
            };
            for (var aE in aH) {
                aF.prototype[aE] = aH[aE]
            }
            ar = new aF();
            ae.childList.push(ar);
            var aG = new aF();
            aG.TYPE_FRAME = aF.TYPE_FRAME;
            aG.TYPE_TIMER = aF.TYPE_TIMER;
            ae.childList.push(aG);
            return aG
        })();
    var ad = (function () {
            function aE() {
                this.responseType = null
            }
            aE.prototype = {
                TEXT: "text",
                JSON: "json",
                ARRAY_BUFFER: "arraybuffer",
                BLOB: "blob",
                get: function (aG, aI, aH, aF) {
                    this.getRequest("GET", aG, aI, aH, aF)
                },
                post: function (aG, aI, aH, aF) {
                    this.getRequest("POST", aG, aI, aH, aF)
                },
                getRequest: function (aO, aF, aL, aG, aH) {
                    var aP = this,
                        aI, aJ = "",
                        aN = "";
                    aP.err = aH;
                    var aM = aP.getHttp();
                    if (!aM) {
                            return
                        }
                    if (aL) {
                            for (aI in aL) {
                                aJ += (aN + aI + "=" + aL[aI]);
                                aN = "&"
                            }
                        }
                    if (aO.toLowerCase() == "get" && aJ.length > 0) {
                            aF += ((aF.indexOf("?") >= 0 ? "&" : "?") + aJ);
                            aJ = null
                        }
                    aM.open(aO, aF, true);
                    if (aP.responseType) {
                            if (aP.responseType == aP.JSON) {
                                try {
                                    aM.responseType = aP.responseType
                                } catch (aK) {
                                    aM.responseType = aP.TEXT;
                                    aM._responseType = "json"
                                }
                            } else {
                                aM.responseType = aP.responseType
                            }
                            aP.responseType = aP.TEXT
                        }
                    aM.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    aM.onreadystatechange = function () {
                            if (aM.readyState == 4) {
                                if (aM.status >= 200 && aM.status < 300 || aM.status === 304) {
                                    if (aG) {
                                        if (aM._responseType == aP.JSON) {
                                            aM._responseType = aP.TEXT;
                                            aG(JSON.parse(aM.responseText))
                                        } else {
                                            if (aM.responseType == aP.ARRAY_BUFFER || aM.responseType == aP.BLOB || aM.responseType == aP.JSON) {
                                                aG(aM.response)
                                            } else {
                                                if (aM.responseText.length > 0) {
                                                    aG(aM.responseText)
                                                } else {
                                                    aG(null)
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (aH) {
                                        aH(aM)
                                    }
                                }
                            }
                        };
                    aM.send(aJ)
                },
                getHttp: function () {
                    if (typeof XMLHttpRequest != Y) {
                        return new XMLHttpRequest()
                    }
                    try {
                        return new ActiveXObject("Msxml2.XMLHTTP")
                    } catch (aF) {
                        try {
                            return new ActiveXObject("Microsoft.XMLHTTP")
                        } catch (aF) {
                            if (!this.err) {
                                this.err(aF)
                            }
                        }
                    }
                    return false
                }
            };
            return new aE()
        })();
    var J = (function () {
            function aF() {
                var aH = this;
                E(aH, f, []);
                aH.display = document.createElement("div");
                aH.iframe = document.createElement("iframe");
                aH.display.style.position = "absolute";
                aH.display.style.marginTop = "0px";
                aH.display.style.marginLeft = "0px";
                aH.display.style.zIndex = 11;
                if (ae.ios) {
                    aH.display.style.overflow = "auto";
                    aH.display.style.webkitOverflowScrolling = "touch"
                }
                aH.display.appendChild(aH.iframe);
                aH.idAdded = false
            }
            var aG = {
                loadURL: function (aH) {
                    var aI = this;
                    aI.iframe.src = aH;
                    aI.iframe.onload = function () {
                        aI.dispatchEvent(y.COMPLETE)
                    }
                },
                show: function () {
                    var aH = this;
                    if (!aH.idAdded) {
                        ae.object.appendChild(aH.display);
                        aH.idAdded = true
                    }
                    if (aH.display.style.display == "none") {
                        aH.display.style.display = ""
                    }
                },
                die: function () {
                    ae.object.removeChild(this.display);
                    this.idAdded = false
                },
                hide: function () {
                    this.display.style.display = "none"
                },
                setViewPort: function (aI) {
                    var aH = this,
                        aK = parseInt(ae.canvasObj.style.width) / ae.canvasObj.width,
                        aJ = parseInt(ae.canvasObj.style.height) / ae.canvasObj.height;
                    aH.display.style.marginTop = (parseInt(ae.canvasObj.style.marginTop) + ((aI.y * aJ) >>> 0)) + "px";
                    aH.display.style.marginLeft = (parseInt(ae.canvasObj.style.marginLeft) + ((aI.x * aK) >>> 0)) + "px";
                    aH.iframe.style.width = aH.display.style.width = (aI.width * aK >>> 0) + "px";
                    aH.iframe.style.height = aH.display.style.height = (aI.height * aJ >>> 0) + "px"
                }
            };
            for (var aE in aG) {
                aF.prototype[aE] = aG[aE]
            }
            return aF
        })();
    var R = (function () {
            function aF(aI) {
                var aH = this;
                E(aH, r, []);
                aH.q1 = null;
                aH.q2 = null;
                aH.q3 = null;
                aH.q4 = null;
                aH.parent = null;
                aH.data = [];
                aH.rect = aI;
                aH.root = aH
            }
            var aG = {
                createChildren: function (aI) {
                    if (aI == 0) {
                        return
                    }
                    var aK = this;
                    var aH = aK.rect.width / 2,
                        aJ = aK.rect.height / 2;
                    aK.q1 = new aF(new O(aK.rect.x + aH, aK.rect.y, aH, aJ));
                    aK.q2 = new aF(new O(aK.rect.x + aH, aK.rect.y + aJ, aH, aJ));
                    aK.q3 = new aF(new O(aK.rect.x, aK.rect.y + aJ, aH, aJ));
                    aK.q4 = new aF(new O(aK.rect.x, aK.rect.y, aH, aJ));
                    aK.q1.parent = aK.q2.parent = aK.q3.parent = aK.q4.parent = aK;
                    aK.q1.root = aK.q2.root = aK.q3.root = aK.q4.root = aK.root;
                    aK.q1.createChildren(aI - 1);
                    aK.q2.createChildren(aI - 1);
                    aK.q3.createChildren(aI - 1);
                    aK.q4.createChildren(aI - 1)
                },
                hasChildren: function () {
                    var aH = this;
                    return aH.q1 && aH.q2 && aH.q3 && aH.q4
                },
                clear: function () {
                    var aH = this;
                    if (aH.hasChildren()) {
                        return aH.q1.clear() || aH.q2.clear() || aH.q3.clear() || aH.q4.clear()
                    } else {
                        aH.q1 = null;
                        aH.q2 = null;
                        aH.q3 = null;
                        aH.q4 = null;
                        aH.parent = null;
                        aH.data = [];
                        return aH
                    }
                },
                add: function (aI, aH, aK) {
                    var aJ = this;
                    if (!aJ.isIn(aH, aK)) {
                        return null
                    }
                    if (aJ.hasChildren()) {
                        return aJ.q1.add(aI, aH, aK) || aJ.q2.add(aI, aH, aK) || aJ.q3.add(aI, aH, aK) || aJ.q4.add(aI, aH, aK)
                    } else {
                        aJ.data.push(aI);
                        return aJ
                    }
                },
                remove: function (aI, aH, aL) {
                    var aK = this;
                    if (!aK.isIn(aH, aL)) {
                        return null
                    }
                    if (aK.hasChildren()) {
                        return aK.q1.remove(aI, aH, aL) || aK.q2.remove(aI, aH, aL) || aK.q3.remove(aI, aH, aL) || aK.q4.remove(aI, aH, aL)
                    } else {
                        var aJ = aK.data.indexOf(aI);
                        if (aJ != -1) {
                            aK.data.splice(aJ, 1);
                            return aK
                        } else {
                            return null
                        }
                    }
                },
                isIn: function (aH, aJ) {
                    var aI = this;
                    return (typeof aH == Y || (aH >= aI.rect.x && aH < aI.rect.right)) && (typeof aJ == Y || (aJ >= aI.rect.y && aJ < aI.rect.bottom))
                },
                getDataInRect: function (aJ) {
                    var aH = this;
                    if (!aH.rect.intersects(aJ)) {
                        return []
                    }
                    var aI = aH.data.concat();
                    if (aH.hasChildren()) {
                        aI.push.apply(aI, aH.q1.getDataInRect(aJ));
                        aI.push.apply(aI, aH.q2.getDataInRect(aJ));
                        aI.push.apply(aI, aH.q3.getDataInRect(aJ));
                        aI.push.apply(aI, aH.q4.getDataInRect(aJ))
                    }
                    return aI
                }
            };
            for (var aE in aG) {
                aF.prototype[aE] = aG[aE]
            }
            return aF
        })();
    A.addChild = am;
    A.removeChild = ao;
    A.base = B;
    A.accelerometerEvent = e;
    A.ajax = ad;
    A.animation = k;
    A.bitmap = q;
    A.bitmapData = s;
    A.bitmapFilter = aj;
    A.colorMatrixFilter = ak;
    A.colorTransform = V;
    A.convolutionFilter = b;
    A.displayObject = Q;
    A.displayObjectContainer = ag;
    A.dropShadowFilter = ai;
    A.easing = t;
    A.event = y;
    A.eventDispatcher = f;
    A.focusEvent = aq;
    A.global = ae;
    A.graphics = l;
    A.init = M;
    A.interactiveObject = h;
    A.keyboardEvent = C;
    A.matrix = aB;
    A.media = x;
    A.mouseEvent = g;
    A.mouseEventContainer = an;
    A.multitouch = H;
    A.multitouchInputMode = au;
    A.object = r;
    A.point = ax;
    A.rectangle = O;
    A.shape = n;
    A.sound = a;
    A.sprite = X;
    A.stage = ay;
    A.stageAlign = az;
    A.stageScaleMode = al;
    A.stageWebView = J;
    A.system = aD;
    A.textEvent = at;
    A.timerEvent = ab;
    A.transform = c;
    A.tweenLite = D;
    A.tweenLiteTimeline = ar;
    A.vec2 = F;
    A.webAudio = T;
    A.guide = (function () {
            function aE(aF, aL, aG, aK, aH) {
                if (typeof aF === "object") {
                    aH = aF.color;
                    aK = aF.h;
                    aG = aF.w;
                    aL = aF.y;
                    aF = aF.x
                }
                aH = aH || "#fff";
                var aJ = this;
                A.base(aJ, A.shape, []);
                aJ.x = aF;
                aJ.y = aL;
                aJ.w = aG;
                aJ.h = aK;
                aJ.r = Math.min(aG, aK) / 2;
                aJ.tweens = [];
                aJ.timers = [];
                aJ.arcList = [];
                for (var aI = 0; aI < 3; aI++) {
                    (function () {
                        var aM = {
                            r: 0,
                            p: 1
                        };
                        aJ.graphics.add(function () {
                            var aN = A.global.canvas;
                            aN.save();
                            aN.beginPath();
                            aN.arc(aJ.w / 2, aJ.h / 2, aM.r, 0, 2 * Math.PI);
                            aN.closePath();
                            aN.fillStyle = aH;
                            aN.globalAlpha = aM.p;
                            aN.fill();
                            aN.restore()
                        });
                        aJ.arcList.push(aM)
                    })()
                }
            }
            aE.prototype.play = function () {
                var aF = this;
                aF.stop();
                aF.arcList.forEach(function (aG, aH) {
                    aF.timers.push(setTimeout(function () {
                        aF.tweens.push(A.tweenLite.to(aG, 1, {
                            r: aF.r,
                            p: 0,
                            loop: true,
                            onComplete: function (aI) {
                                aG.r = 0;
                                aG.p = 1
                            }
                        }))
                    }, (2 - aH) * 200))
                });
                return aF
            };
            aE.prototype.change = function (aG) {
                var aF = this;
                aG.x && (aF.x = aG.x);
                aG.y && (aF.y = aG.y);
                return aF
            };
            aE.prototype.stop = function () {
                var aF = this;
                aF.arcList.forEach(function (aG, aH) {
                    clearTimeout(aF.timers[aH]);
                    aG.r = 0;
                    aG.p = 1
                });
                aF.tweens.forEach(function (aH, aG) {
                    A.tweenLite.remove(aH)
                });
                aF.tweens = [];
                aF.timers = [];
                return aF
            };
            return aE
        })();
    A.Score = function (aI, aE, aH) {
            var aG = $.extend({
                textAlign: "center",
                baseBaseLine: "middle",
            }, aI);
            var aF = {};
            return function (aO, aK, aP, aM, aJ) {
                var aN = aF[aO];
                if (!aN) {
                    aN = new A.bitmapData(null, 0, 0, aE * A.global.ratio, aH * A.global.ratio, s.DATA_CANVAS);
                    $.extend(aN._context, aG);
                    aN._context.fillText(aO, aE / 2, aH);
                    aF[aO] = aN
                }
                var aL = this;
                A.base(aL, A.bitmap, [aN, aK, aP, aM || aE, aJ || aH])
            }
        };
    A.test = (function () {
            var aF = false;
            var aE = 300;
            var aG = {
                init: function (aH) {
                    aF = [];
                    this.lastTime = new Date().getTime()
                },
                run: function (aI) {
                    if (!m_debug || !aF) {
                        return
                    }
                    if (aF.length > (aI || aE)) {
                        alert(aF);
                        aF = false;
                        return
                    }
                    var aH = new Date().getTime();
                    aF.push(aH - this.lastTime);
                    this.lastTime = aH
                }
            };
            aG.init();
            return aG
        })();
    A.setTopBarNotLF = function (aE, aF) {
            var aG = A.global;
            aG.canvasObj = aE;
            aG.width = aG.canvasObj.width;
            aG.height = aG.canvasObj.height;
            aG.canvasStyleWidth = aG.width;
            aG.canvasStyleHeight = aG.height;
            aG.canvas = aG.canvasObj.getContext("2d");
            j(aF)
        };
    A.showTopBar = function () {
            A.gameTopBar && A.global.show([A.gameTopBar])
        };

    function j(aH) {
            if (A.notCanvasTopBar) {
                return
            }
            aH = aH || 1;
            var aJ = new A.sprite();
            var aG = $("#gameTopBar").hide();
            if (aG.length == 0) {
                return
            }
            var aF = $(".userImgBox");
            var aI = aJ.graphics;
            var aE = g_rem * aH;

            function aK(aL) {
                return aL.replace(/([.\d]+)(px|em|rem|pt)/g, function (aN, aM, aO) {
                    return (aM * aH) + aO
                })
            }
            aI.drawRect(0, "", [0, 0, aG.outerWidth() * aH, aG.outerHeight() * aH], true, aG.css("background-color"));
            if ($("#grade").length > 0) {
                aI.e_grade = [0, 3.9 * aE, 1.7 * aE, {
                    font: aK($("#grade").css("font")),
                    textAlign: "left",
                    textBaseline: "middle",
                    fillStyle: aG.css("color")
                }]
            }
            if ($(".timeBox").length > 0 && hg.time.initTime !== 99999) {
                aI.e_timeText = ["时间", 8 * aE, 1 * aE, {
                    font: aK($(".timeBox").css("font")),
                    textAlign: "center",
                    textBaseline: "middle",
                    fillStyle: aG.css("color")
                }];
                aI.e_time = ["10.00", 8 * aE, 2.25 * aE, {
                    font: aK($(".time").css("font"))
                }]
            }
            if (aF.length > 0) {
                aI.userImg = [0.2 * aE, aF.css("border-color"), [2.1 * aE, 1.75 * aE, 1.25 * aE, 0, Math.PI * 2], new A.bitmap(new A.bitmapData(aF.find(".userImg")[0]), 0.85 * aE, 0.5 * aE, 2.5 * aE, 2.5 * aE)]
            }
            aI.add(ap);
            hg.time && hg.time.initTime !== 99999 && (hg.time.on("setTime", function (aL) {
                aI.e_time[0] = aL
            }).targetFlag = false);
            hg.grade && (hg.grade.on("setGrade", function (aL) {
                aI.e_grade[0] = aL
            }).target = null);
            hg.time.init();
            aG.remove();
            A.gameTopBar = aJ
        }
    function ap() {
            var aG = A.global.canvas;
            if (this.userImg) {
                var aF = this.userImg[3];
                var aE = this.userImg[2];
                aG.beginPath();
                aG.moveTo(aE[0] + aE[2], aE[1]);
                aG.arc.apply(aG, aE);
                aG.lineWidth = this.userImg[0];
                aG.strokeStyle = this.userImg[1];
                aG.stroke();
                if (aF.bitmapData.width > 0 && aF.bitmapData.height > 0) {
                    aG.save();
                    aG.clip();
                    aG.drawImage(aF.bitmapData.image, 0, 0, aF.bitmapData.width, aF.bitmapData.height, aF.x, aF.y, aF.width, aF.height);
                    aG.restore()
                }
            }
            aC(aG, this.e_grade);
            aC(aG, this.e_timeText);
            aC(aG, this.e_time)
        }
    function aC(aF, aE) {
            if (!aE) {
                return
            }
            $.extend(aF, aE[3]);
            aF.fillText(aE[0], aE[1], aE[2])
        }
    function Z(aM, aJ, aK, aG, aI, aL, aE) {
            av();
            ae.speed = ae.delta = aM;
            if (aM === 0) {
                aM = ae.requestAnimFrame
            } else {
                if (aE) {
                    aM = (function (aN) {
                        return function (aO) {
                            aw.setTimeout(aO, aN)
                        }
                    })(aM)
                }
            }
            var aH = function () {
                j();
                hg.time && (hg.time.updateFlag = false);
                setTimeout(aI, 100);
                ae.startTimer = (new Date()).getTime()
            };
            var aF;
            if (typeof aM == "function") {
                aF = function () {
                    ae.speed = null;
                    ae.currentTime = (new Date).getTime();
                    aM(function () {
                        var aN = (new Date).getTime();
                        ae.delta = aN - ae.currentTime;
                        ae.currentTime = aN;
                        ae.delta > 500 && (ae.delta = 0);
                        ae.onShow();
                        aM(arguments.callee)
                    });
                    ae.setCanvas(aJ, aK, aG);
                    aH()
                }
            } else {
                aF = function () {
                    ae.frameRate = setInterval(function () {
                        ae.onShow()
                    }, aM);
                    ae.setCanvas(aJ, aK, aG);
                    aH()
                }
            }
            if (aL != null && aL == y.INIT) {
                aF()
            } else {
                y.addEventListener(aw, "load", function () {
                    aF()
                })
            }
        }
    A.setCanvasePixelRatio = av;
    A.coverCanvasePrototypePixelRatio = function (aE, aF) {
            aE[I] = aF
        };

    function av(aE, aF) {
            var aE = aE || CanvasRenderingContext2D.prototype;
            if (!aE[I]) {
                U(aE)
            }
            if (aF) {
                A.coverCanvasePrototypePixelRatio(aE, aF)
            }
            return aE[I]
        }
    function U(aE) {
            aE[I] = (function (aH) {
                var aJ = 1;
                try {
                    aJ = aH.backingStorePixelRatio || aH.webkitBackingStorePixelRatio || aH.mozBackingStorePixelRatio || aH.msBackingStorePixelRatio || aH.oBackingStorePixelRatio || 1
                } catch (aI) {}
                return (aw.devicePixelRatio || 1) / aJ
            })(aE);
            var aG = function (aJ, aH) {
                for (var aI in aJ) {
                    if (aJ.hasOwnProperty(aI)) {
                        aH(aJ[aI], aI)
                    }
                }
            },
                aF = {
                    fillRect: "all",
                    clearRect: "all",
                    strokeRect: "all",
                    moveTo: "all",
                    lineTo: "all",
                    arc: [0, 1, 2],
                    arcTo: "all",
                    bezierCurveTo: "all",
                    isPointinPath: "all",
                    isPointinStroke: "all",
                    quadraticCurveTo: "all",
                    rect: "all",
                    translate: "all",
                    createRadialGradient: "all",
                    createLinearGradient: "all",
                    transform: [4, 5],
                    setTransform: [4, 5],
                };
            aG(aF, function (aI, aH) {
                    aE[aH] = (function (aJ) {
                        return function () {
                            var aM, aK, aL = Array.prototype.slice.call(arguments),
                                aN = this[I];
                            if (aI === "all") {
                                    aL = aL.map(function (aO) {
                                        return aO * aN
                                    })
                                } else {
                                    if (Array.isArray(aI)) {
                                        for (aM = 0, aK = aI.length; aM < aK; aM++) {
                                            aL[aI[aM]] *= aN
                                        }
                                    }
                                }
                            return aJ.apply(this, aL)
                        }
                    })(aE[aH])
                });
            aE.stroke = (function (aH) {
                    return function () {
                        var aI = this[I];
                        this.lineWidth *= aI;
                        aH.apply(this, arguments);
                        this.lineWidth /= aI
                    }
                })(aE.stroke);
            aE.fillText = (function (aH) {
                    return function () {
                        var aI = Array.prototype.slice.call(arguments);
                        var aJ = this[I];
                        aI[1] *= aJ;
                        aI[2] *= aJ;
                        if (aI[3]) {
                            aI[3] *= aJ
                        }
                        this.font = this.font.replace(/([.\d]+)(px|em|rem|pt)/g, function (aL, aK, aM) {
                            return (aK * aJ) + aM
                        });
                        aH.apply(this, aI);
                        this.font = this.font.replace(/([.\d]+)(px|em|rem|pt)/g, function (aL, aK, aM) {
                            return (aK / aJ) + aM
                        })
                    }
                })(aE.fillText);
            aE.strokeText = (function (aH) {
                    return function () {
                        var aI = Array.prototype.slice.call(arguments);
                        var aJ = this[I];
                        aI[1] *= aJ;
                        aI[2] *= aJ;
                        this.font = this.font.replace(/([.\d]+)(px|em|rem|pt)/g, function (aL, aK, aM) {
                            return (aK * aJ) + aM
                        });
                        aH.apply(this, aI);
                        this.font = this.font.replace(/([.\d]+)(px|em|rem|pt)/g, function (aL, aK, aM) {
                            return (aK / aJ) + aM
                        })
                    }
                })(aE.strokeText);
            aE.drawImage = (function (aH) {
                    return function () {
                        var aI = Array.prototype.slice.call(arguments);
                        var aJ = this[I];
                        if (aI.length === 3) {
                            aI[1] *= aJ;
                            aI[2] *= aJ
                        } else {
                            if (aI.length === 5) {
                                aI[1] *= aJ;
                                aI[2] *= aJ;
                                aI[3] *= aJ;
                                aI[4] *= aJ
                            } else {
                                if (aI.length === 9) {
                                    aI[5] *= aJ;
                                    aI[6] *= aJ;
                                    aI[7] *= aJ;
                                    aI[8] *= aJ
                                }
                            }
                        }
                        aH.apply(this, aI)
                    }
                })(aE.drawImage);
            aE.putImageData = (function (aH) {
                    return function () {
                        var aI = Array.prototype.slice.call(arguments);
                        var aJ = this[I];
                        for (i = 1, len = aI.length; i < len; i++) {
                            aI[i] *= aJ
                        }
                        aH.apply(this, aI)
                    }
                })(aE.putImageData)
        }
})(LF, window);
